

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Oct  2 04:20:09 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 2.10
    19                           ; Generated 31/07/2019 GMT
    20                           ; 
    21                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4620 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     _LATB	set	3978
    53  0000                     _TRISD	set	3989
    54  0000                     _TRISB	set	3987
    55  0000                     _LATD1	set	31841
    56  0000                     _LATD0	set	31840
    57                           
    58                           	psect	smallconst
    59  001000                     __psmallconst:
    60                           	opt callstack 0
    61  001000  00                 	db	0
    62  001001                     STR_2:
    63  001001  46                 	db	70	;'F'
    64  001002  72                 	db	114	;'r'
    65  001003  61                 	db	97	;'a'
    66  001004  6E                 	db	110	;'n'
    67  001005  63                 	db	99	;'c'
    68  001006  69                 	db	105	;'i'
    69  001007  73                 	db	115	;'s'
    70  001008  63                 	db	99	;'c'
    71  001009  6F                 	db	111	;'o'
    72  00100A  20                 	db	32
    73  00100B  51                 	db	81	;'Q'
    74  00100C  75                 	db	117	;'u'
    75  00100D  69                 	db	105	;'i'
    76  00100E  72                 	db	114	;'r'
    77  00100F  6F                 	db	111	;'o'
    78  001010  67                 	db	103	;'g'
    79  001011  61                 	db	97	;'a'
    80  001012  20                 	db	32
    81  001013  79                 	db	121	;'y'
    82  001014  20                 	db	32
    83  001015  4D                 	db	77	;'M'
    84  001016  65                 	db	101	;'e'
    85  001017  64                 	db	100	;'d'
    86  001018  75                 	db	117	;'u'
    87  001019  73                 	db	115	;'s'
    88  00101A  00                 	db	0
    89  00101B                     STR_1:
    90  00101B  48                 	db	72	;'H'
    91  00101C  6F                 	db	111	;'o'
    92  00101D  6C                 	db	108	;'l'
    93  00101E  61                 	db	97	;'a'
    94  00101F  00                 	db	0
    95                           
    96                           ; #config settings
    97  001020  00                 	db	0	; dummy byte at the end
    98  0000                     
    99                           	psect	cinit
   100  001178                     __pcinit:
   101                           	opt callstack 0
   102  001178                     start_initialization:
   103                           	opt callstack 0
   104  001178                     __initialization:
   105                           	opt callstack 0
   106  001178                     end_of_initialization:
   107                           	opt callstack 0
   108  001178                     __end_of__initialization:
   109                           	opt callstack 0
   110  001178  0E00               	movlw	low (__Lsmallconst shr (0+16))
   111  00117A  6EF8               	movwf	tblptru,c
   112  00117C  0E10               	movlw	high __Lsmallconst
   113  00117E  6EF7               	movwf	tblptrh,c
   114  001180  0100               	movlb	0
   115  001182  EF71  F008         	goto	_main	;jump to C main() function
   116                           
   117                           	psect	cstackCOMRAM
   118  000001                     __pcstackCOMRAM:
   119                           	opt callstack 0
   120  000001                     MSdelay@val:
   121                           	opt callstack 0
   122                           
   123                           ; 2 bytes @ 0x0
   124  000001                     	ds	2
   125  000003                     MSdelay@i:
   126                           	opt callstack 0
   127                           
   128                           ; 2 bytes @ 0x2
   129  000003                     	ds	2
   130  000005                     MSdelay@j:
   131                           	opt callstack 0
   132                           
   133                           ; 2 bytes @ 0x4
   134  000005                     	ds	2
   135  000007                     LCD_Command@cmd:
   136                           	opt callstack 0
   137  000007                     LCD_Char@dat:
   138                           	opt callstack 0
   139                           
   140                           ; 1 bytes @ 0x6
   141  000007                     	ds	1
   142  000008                     LCD_String@msg:
   143                           	opt callstack 0
   144                           
   145                           ; 2 bytes @ 0x7
   146  000008                     	ds	2
   147  00000A                     LCD_String_xy@pos:
   148                           	opt callstack 0
   149                           
   150                           ; 1 bytes @ 0x9
   151  00000A                     	ds	1
   152  00000B                     LCD_String_xy@msg:
   153                           	opt callstack 0
   154                           
   155                           ; 2 bytes @ 0xA
   156  00000B                     	ds	2
   157  00000D                     LCD_String_xy@row:
   158                           	opt callstack 0
   159                           
   160                           ; 1 bytes @ 0xC
   161  00000D                     	ds	1
   162  00000E                     LCD_String_xy@location:
   163                           	opt callstack 0
   164                           
   165                           ; 1 bytes @ 0xD
   166  00000E                     	ds	1
   167  00000F                     
   168                           ; 1 bytes @ 0xE
   169 ;;
   170 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   171 ;;
   172 ;; *************** function _main *****************
   173 ;; Defined at:
   174 ;;		line 24 in file "main.c"
   175 ;; Parameters:    Size  Location     Type
   176 ;;		None
   177 ;; Auto vars:     Size  Location     Type
   178 ;;		None
   179 ;; Return value:  Size  Location     Type
   180 ;;                  1    wreg      void 
   181 ;; Registers used:
   182 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   183 ;; Tracked objects:
   184 ;;		On entry : 0/0
   185 ;;		On exit  : 0/0
   186 ;;		Unchanged: 0/0
   187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   192 ;;Total ram usage:        0 bytes
   193 ;; Hardware stack levels required when called:    4
   194 ;; This function calls:
   195 ;;		_LCD_Init
   196 ;;		_LCD_String_xy
   197 ;; This function is called by:
   198 ;;		Startup code after reset
   199 ;; This function uses a non-reentrant model
   200 ;;
   201                           
   202                           	psect	text0
   203  0010E2                     __ptext0:
   204                           	opt callstack 0
   205  0010E2                     _main:
   206                           	opt callstack 27
   207  0010E2                     
   208                           ;main.c: 26:     LCD_Init();
   209  0010E2  EC89  F008         	call	_LCD_Init	;wreg free
   210  0010E6                     
   211                           ;main.c: 27:     LCD_String_xy(1,5,"Hola");
   212  0010E6  0E05               	movlw	5
   213  0010E8  6E0A               	movwf	LCD_String_xy@pos^0,c
   214  0010EA  0E1B               	movlw	low STR_1
   215  0010EC  6E0B               	movwf	LCD_String_xy@msg^0,c
   216  0010EE  0E10               	movlw	high STR_1
   217  0010F0  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   218  0010F2  0E01               	movlw	1
   219  0010F4  EC36  F008         	call	_LCD_String_xy
   220  0010F8                     
   221                           ;main.c: 29:     LCD_String_xy(2,0,"Francisco Quiroga y Medus");
   222  0010F8  0E00               	movlw	0
   223  0010FA  6E0A               	movwf	LCD_String_xy@pos^0,c
   224  0010FC  0E01               	movlw	low STR_2
   225  0010FE  6E0B               	movwf	LCD_String_xy@msg^0,c
   226  001100  0E10               	movlw	high STR_2
   227  001102  6E0C               	movwf	(LCD_String_xy@msg+1)^0,c
   228  001104  0E02               	movlw	2
   229  001106  EC36  F008         	call	_LCD_String_xy
   230  00110A                     l25:
   231  00110A  EF85  F008         	goto	l25
   232  00110E  EF00  F000         	goto	start
   233  001112                     __end_of_main:
   234                           	opt callstack 0
   235                           
   236 ;; *************** function _LCD_String_xy *****************
   237 ;; Defined at:
   238 ;;		line 83 in file "main.c"
   239 ;; Parameters:    Size  Location     Type
   240 ;;  row             1    wreg     unsigned char 
   241 ;;  pos             1    9[COMRAM] unsigned char 
   242 ;;  msg             2   10[COMRAM] PTR const unsigned char 
   243 ;;		 -> STR_2(26), STR_1(5), 
   244 ;; Auto vars:     Size  Location     Type
   245 ;;  row             1   12[COMRAM] unsigned char 
   246 ;;  location        1   13[COMRAM] unsigned char 
   247 ;; Return value:  Size  Location     Type
   248 ;;                  1    wreg      void 
   249 ;; Registers used:
   250 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   251 ;; Tracked objects:
   252 ;;		On entry : 0/0
   253 ;;		On exit  : 0/0
   254 ;;		Unchanged: 0/0
   255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   256 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   257 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   259 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   260 ;;Total ram usage:        5 bytes
   261 ;; Hardware stack levels used:    1
   262 ;; Hardware stack levels required when called:    3
   263 ;; This function calls:
   264 ;;		_LCD_Command
   265 ;;		_LCD_String
   266 ;; This function is called by:
   267 ;;		_main
   268 ;; This function uses a non-reentrant model
   269 ;;
   270                           
   271                           	psect	text1
   272  00106C                     __ptext1:
   273                           	opt callstack 0
   274  00106C                     _LCD_String_xy:
   275                           	opt callstack 27
   276                           
   277                           ;incstack = 0
   278                           ;LCD_String_xy@row stored from wreg
   279  00106C  6E0D               	movwf	LCD_String_xy@row^0,c
   280  00106E                     
   281                           ;main.c: 86:     if(row<=1)
   282  00106E  0E02               	movlw	2
   283  001070  600D               	cpfslt	LCD_String_xy@row^0,c
   284  001072  EF3D  F008         	goto	u81
   285  001076  EF3F  F008         	goto	u80
   286  00107A                     u81:
   287  00107A  EF48  F008         	goto	l873
   288  00107E                     u80:
   289  00107E                     
   290                           ;main.c: 87:     {;main.c: 88:         location=(0x80) | ((pos) & 0x0f);
   291  00107E  500A               	movf	LCD_String_xy@pos^0,w,c
   292  001080  0B0F               	andlw	15
   293  001082  0980               	iorlw	128
   294  001084  6E0E               	movwf	LCD_String_xy@location^0,c
   295  001086                     
   296                           ;main.c: 89:         LCD_Command(location);
   297  001086  500E               	movf	LCD_String_xy@location^0,w,c
   298  001088  ECAE  F008         	call	_LCD_Command
   299                           
   300                           ;main.c: 90:     }
   301  00108C  EF4F  F008         	goto	l877
   302  001090                     l873:
   303                           
   304                           ;main.c: 92:     {;main.c: 93:         location=(0xC0) | ((pos) & 0x0f);
   305  001090  500A               	movf	LCD_String_xy@pos^0,w,c
   306  001092  0B0F               	andlw	15
   307  001094  09C0               	iorlw	192
   308  001096  6E0E               	movwf	LCD_String_xy@location^0,c
   309  001098                     
   310                           ;main.c: 94:         LCD_Command(location);
   311  001098  500E               	movf	LCD_String_xy@location^0,w,c
   312  00109A  ECAE  F008         	call	_LCD_Command
   313  00109E                     l877:
   314                           
   315                           ;main.c: 96:     LCD_String(msg);
   316  00109E  C00B  F008         	movff	LCD_String_xy@msg,LCD_String@msg
   317  0010A2  C00C  F009         	movff	LCD_String_xy@msg+1,LCD_String@msg+1
   318  0010A6  EC56  F008         	call	_LCD_String	;wreg free
   319  0010AA  0012               	return		;funcret
   320  0010AC                     __end_of_LCD_String_xy:
   321                           	opt callstack 0
   322                           
   323 ;; *************** function _LCD_String *****************
   324 ;; Defined at:
   325 ;;		line 73 in file "main.c"
   326 ;; Parameters:    Size  Location     Type
   327 ;;  msg             2    7[COMRAM] PTR const unsigned char 
   328 ;;		 -> STR_2(26), STR_1(5), 
   329 ;; Auto vars:     Size  Location     Type
   330 ;;		None
   331 ;; Return value:  Size  Location     Type
   332 ;;                  1    wreg      void 
   333 ;; Registers used:
   334 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   335 ;; Tracked objects:
   336 ;;		On entry : 0/0
   337 ;;		On exit  : 0/0
   338 ;;		Unchanged: 0/0
   339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   340 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   343 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   344 ;;Total ram usage:        2 bytes
   345 ;; Hardware stack levels used:    1
   346 ;; Hardware stack levels required when called:    2
   347 ;; This function calls:
   348 ;;		_LCD_Char
   349 ;; This function is called by:
   350 ;;		_LCD_String_xy
   351 ;; This function uses a non-reentrant model
   352 ;;
   353                           
   354                           	psect	text2
   355  0010AC                     __ptext2:
   356                           	opt callstack 0
   357  0010AC                     _LCD_String:
   358                           	opt callstack 27
   359  0010AC                     
   360                           ;main.c: 73: void LCD_String(const char *msg);main.c: 74: {;main.c: 75:  while((*msg)!=0
      +                          )
   361  0010AC  EF62  F008         	goto	l857
   362  0010B0                     l853:
   363                           
   364                           ;main.c: 76:  {;main.c: 77:    LCD_Char(*msg);
   365  0010B0  C008  FFF6         	movff	LCD_String@msg,tblptrl
   366  0010B4  C009  FFF7         	movff	LCD_String@msg+1,tblptrh
   367  0010B8                     	if	0	;tblptru may be non-zero
   368  0010B8                     	endif
   369  0010B8                     	if	0	;tblptru may be non-zero
   370  0010B8                     	endif
   371  0010B8  0008               	tblrd		*
   372  0010BA  50F5               	movf	tablat,w,c
   373  0010BC  ECA0  F008         	call	_LCD_Char
   374  0010C0                     
   375                           ;main.c: 78:    msg++;
   376  0010C0  4A08               	infsnz	LCD_String@msg^0,f,c
   377  0010C2  2A09               	incf	(LCD_String@msg+1)^0,f,c
   378  0010C4                     l857:
   379                           
   380                           ;main.c: 75:  while((*msg)!=0)
   381  0010C4  C008  FFF6         	movff	LCD_String@msg,tblptrl
   382  0010C8  C009  FFF7         	movff	LCD_String@msg+1,tblptrh
   383  0010CC                     	if	0	;tblptru may be non-zero
   384  0010CC                     	endif
   385  0010CC                     	if	0	;tblptru may be non-zero
   386  0010CC                     	endif
   387  0010CC  0008               	tblrd		*
   388  0010CE  50F5               	movf	tablat,w,c
   389  0010D0  0900               	iorlw	0
   390  0010D2  A4D8               	btfss	status,2,c
   391  0010D4  EF6E  F008         	goto	u71
   392  0010D8  EF70  F008         	goto	u70
   393  0010DC                     u71:
   394  0010DC  EF58  F008         	goto	l853
   395  0010E0                     u70:
   396  0010E0  0012               	return		;funcret
   397  0010E2                     __end_of_LCD_String:
   398                           	opt callstack 0
   399                           
   400 ;; *************** function _LCD_Char *****************
   401 ;; Defined at:
   402 ;;		line 62 in file "main.c"
   403 ;; Parameters:    Size  Location     Type
   404 ;;  dat             1    wreg     unsigned char 
   405 ;; Auto vars:     Size  Location     Type
   406 ;;  dat             1    6[COMRAM] unsigned char 
   407 ;; Return value:  Size  Location     Type
   408 ;;                  1    wreg      void 
   409 ;; Registers used:
   410 ;;		wreg, status,2, status,0, cstack
   411 ;; Tracked objects:
   412 ;;		On entry : 0/0
   413 ;;		On exit  : 0/0
   414 ;;		Unchanged: 0/0
   415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   419 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   420 ;;Total ram usage:        1 bytes
   421 ;; Hardware stack levels used:    1
   422 ;; Hardware stack levels required when called:    1
   423 ;; This function calls:
   424 ;;		_MSdelay
   425 ;; This function is called by:
   426 ;;		_LCD_String
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430                           	psect	text3
   431  001140                     __ptext3:
   432                           	opt callstack 0
   433  001140                     _LCD_Char:
   434                           	opt callstack 27
   435                           
   436                           ;incstack = 0
   437                           ;LCD_Char@dat stored from wreg
   438  001140  6E07               	movwf	LCD_Char@dat^0,c
   439  001142                     
   440                           ;main.c: 62: void LCD_Char(char dat);main.c: 63: {;main.c: 64:  LATB= dat;
   441  001142  C007  FF8A         	movff	LCD_Char@dat,3978	;volatile
   442  001146                     
   443                           ;main.c: 65:  LATD0 = 1;
   444  001146  808C               	bsf	3980,0,c	;volatile
   445  001148                     
   446                           ;main.c: 66:  LATD1=1;
   447  001148  828C               	bsf	3980,1,c	;volatile
   448  00114A                     
   449                           ;main.c: 67:  __nop();
   450  00114A  F000               	nop	
   451  00114C                     
   452                           ;main.c: 68:  LATD1=0;
   453  00114C  928C               	bcf	3980,1,c	;volatile
   454  00114E                     
   455                           ;main.c: 69:  MSdelay(1);
   456  00114E  0E00               	movlw	0
   457  001150  6E02               	movwf	(MSdelay@val+1)^0,c
   458  001152  0E01               	movlw	1
   459  001154  6E01               	movwf	MSdelay@val^0,c
   460  001156  EC11  F008         	call	_MSdelay	;wreg free
   461  00115A  0012               	return		;funcret
   462  00115C                     __end_of_LCD_Char:
   463                           	opt callstack 0
   464                           
   465 ;; *************** function _LCD_Init *****************
   466 ;; Defined at:
   467 ;;		line 36 in file "main.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;		None
   470 ;; Auto vars:     Size  Location     Type
   471 ;;		None
   472 ;; Return value:  Size  Location     Type
   473 ;;                  1    wreg      void 
   474 ;; Registers used:
   475 ;;		wreg, status,2, status,0, cstack
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   485 ;;Total ram usage:        0 bytes
   486 ;; Hardware stack levels used:    1
   487 ;; Hardware stack levels required when called:    2
   488 ;; This function calls:
   489 ;;		_LCD_Command
   490 ;;		_MSdelay
   491 ;; This function is called by:
   492 ;;		_main
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           	psect	text4
   497  001112                     __ptext4:
   498                           	opt callstack 0
   499  001112                     _LCD_Init:
   500                           	opt callstack 28
   501  001112                     
   502                           ;main.c: 38:     MSdelay(15);
   503  001112  0E00               	movlw	0
   504  001114  6E02               	movwf	(MSdelay@val+1)^0,c
   505  001116  0E0F               	movlw	15
   506  001118  6E01               	movwf	MSdelay@val^0,c
   507  00111A  EC11  F008         	call	_MSdelay	;wreg free
   508  00111E                     
   509                           ;main.c: 39:     TRISB = 0x00;
   510  00111E  0E00               	movlw	0
   511  001120  6E93               	movwf	147,c	;volatile
   512  001122                     
   513                           ;main.c: 40:     TRISD = 0x00;
   514  001122  0E00               	movlw	0
   515  001124  6E95               	movwf	149,c	;volatile
   516                           
   517                           ;main.c: 41:     LCD_Command(0x38);
   518  001126  0E38               	movlw	56
   519  001128  ECAE  F008         	call	_LCD_Command
   520                           
   521                           ;main.c: 42:     LCD_Command(0x01);
   522  00112C  0E01               	movlw	1
   523  00112E  ECAE  F008         	call	_LCD_Command
   524                           
   525                           ;main.c: 43:     LCD_Command(0x0c);
   526  001132  0E0C               	movlw	12
   527  001134  ECAE  F008         	call	_LCD_Command
   528                           
   529                           ;main.c: 44:     LCD_Command(0x06);
   530  001138  0E06               	movlw	6
   531  00113A  ECAE  F008         	call	_LCD_Command
   532  00113E  0012               	return		;funcret
   533  001140                     __end_of_LCD_Init:
   534                           	opt callstack 0
   535                           
   536 ;; *************** function _LCD_Command *****************
   537 ;; Defined at:
   538 ;;		line 52 in file "main.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;  cmd             1    wreg     unsigned char 
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  cmd             1    6[COMRAM] unsigned char 
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, status,2, status,0, cstack
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   555 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;Total ram usage:        1 bytes
   557 ;; Hardware stack levels used:    1
   558 ;; Hardware stack levels required when called:    1
   559 ;; This function calls:
   560 ;;		_MSdelay
   561 ;; This function is called by:
   562 ;;		_LCD_Init
   563 ;;		_LCD_String_xy
   564 ;;		_LCD_Clear
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text5
   569  00115C                     __ptext5:
   570                           	opt callstack 0
   571  00115C                     _LCD_Command:
   572                           	opt callstack 28
   573                           
   574                           ;incstack = 0
   575                           ;LCD_Command@cmd stored from wreg
   576  00115C  6E07               	movwf	LCD_Command@cmd^0,c
   577  00115E                     
   578                           ;main.c: 52: void LCD_Command(char cmd );main.c: 53: {;main.c: 54:  LATB= cmd;
   579  00115E  C007  FF8A         	movff	LCD_Command@cmd,3978	;volatile
   580  001162                     
   581                           ;main.c: 55:  LATD0 = 0;
   582  001162  908C               	bcf	3980,0,c	;volatile
   583  001164                     
   584                           ;main.c: 56:  LATD1 = 1;
   585  001164  828C               	bsf	3980,1,c	;volatile
   586  001166                     
   587                           ;main.c: 57:  __nop();
   588  001166  F000               	nop	
   589  001168                     
   590                           ;main.c: 58:  LATD1 = 0;
   591  001168  928C               	bcf	3980,1,c	;volatile
   592  00116A                     
   593                           ;main.c: 59:  MSdelay(3);
   594  00116A  0E00               	movlw	0
   595  00116C  6E02               	movwf	(MSdelay@val+1)^0,c
   596  00116E  0E03               	movlw	3
   597  001170  6E01               	movwf	MSdelay@val^0,c
   598  001172  EC11  F008         	call	_MSdelay	;wreg free
   599  001176  0012               	return		;funcret
   600  001178                     __end_of_LCD_Command:
   601                           	opt callstack 0
   602                           
   603 ;; *************** function _MSdelay *****************
   604 ;; Defined at:
   605 ;;		line 100 in file "main.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;  val             2    0[COMRAM] unsigned int 
   608 ;; Auto vars:     Size  Location     Type
   609 ;;  j               2    4[COMRAM] unsigned int 
   610 ;;  i               2    2[COMRAM] unsigned int 
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, status,2, status,0
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   621 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   623 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   624 ;;Total ram usage:        6 bytes
   625 ;; Hardware stack levels used:    1
   626 ;; This function calls:
   627 ;;		Nothing
   628 ;; This function is called by:
   629 ;;		_LCD_Init
   630 ;;		_LCD_Command
   631 ;;		_LCD_Char
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text6
   636  001022                     __ptext6:
   637                           	opt callstack 0
   638  001022                     _MSdelay:
   639                           	opt callstack 27
   640  001022                     
   641                           ;main.c: 100: void MSdelay(unsigned int val);main.c: 101: {;main.c: 102:      unsigned i
      +                          nt i,j;;main.c: 103:         for(i=0;i<val;i++)
   642  001022  0E00               	movlw	0
   643  001024  6E04               	movwf	(MSdelay@i+1)^0,c
   644  001026  0E00               	movlw	0
   645  001028  6E03               	movwf	MSdelay@i^0,c
   646  00102A  EF2A  F008         	goto	l825
   647  00102E                     l813:
   648                           
   649                           ;main.c: 104:             for(j=0;j<165;j++);
   650  00102E  0E00               	movlw	0
   651  001030  6E06               	movwf	(MSdelay@j+1)^0,c
   652  001032  0E00               	movlw	0
   653  001034  6E05               	movwf	MSdelay@j^0,c
   654  001036                     l819:
   655  001036  4A05               	infsnz	MSdelay@j^0,f,c
   656  001038  2A06               	incf	(MSdelay@j+1)^0,f,c
   657  00103A  5006               	movf	(MSdelay@j+1)^0,w,c
   658  00103C  E109               	bnz	u50
   659  00103E  0EA5               	movlw	165
   660  001040  5C05               	subwf	MSdelay@j^0,w,c
   661  001042  A0D8               	btfss	status,0,c
   662  001044  EF26  F008         	goto	u51
   663  001048  EF28  F008         	goto	u50
   664  00104C                     u51:
   665  00104C  EF1B  F008         	goto	l819
   666  001050                     u50:
   667  001050  4A03               	infsnz	MSdelay@i^0,f,c
   668  001052  2A04               	incf	(MSdelay@i+1)^0,f,c
   669  001054                     l825:
   670  001054  5001               	movf	MSdelay@val^0,w,c
   671  001056  5C03               	subwf	MSdelay@i^0,w,c
   672  001058  5002               	movf	(MSdelay@val+1)^0,w,c
   673  00105A  5804               	subwfb	(MSdelay@i+1)^0,w,c
   674  00105C  A0D8               	btfss	status,0,c
   675  00105E  EF33  F008         	goto	u61
   676  001062  EF35  F008         	goto	u60
   677  001066                     u61:
   678  001066  EF17  F008         	goto	l813
   679  00106A                     u60:
   680  00106A  0012               	return		;funcret
   681  00106C                     __end_of_MSdelay:
   682                           	opt callstack 0
   683                           
   684                           	psect	rparam
   685  0000                     tosu	equ	0xFFF
   686                           tosh	equ	0xFFE
   687                           tosl	equ	0xFFD
   688                           stkptr	equ	0xFFC
   689                           pclatu	equ	0xFFB
   690                           pclath	equ	0xFFA
   691                           pcl	equ	0xFF9
   692                           tblptru	equ	0xFF8
   693                           tblptrh	equ	0xFF7
   694                           tblptrl	equ	0xFF6
   695                           tablat	equ	0xFF5
   696                           prodh	equ	0xFF4
   697                           prodl	equ	0xFF3
   698                           indf0	equ	0xFEF
   699                           postinc0	equ	0xFEE
   700                           postdec0	equ	0xFED
   701                           preinc0	equ	0xFEC
   702                           plusw0	equ	0xFEB
   703                           fsr0h	equ	0xFEA
   704                           fsr0l	equ	0xFE9
   705                           wreg	equ	0xFE8
   706                           indf1	equ	0xFE7
   707                           postinc1	equ	0xFE6
   708                           postdec1	equ	0xFE5
   709                           preinc1	equ	0xFE4
   710                           plusw1	equ	0xFE3
   711                           fsr1h	equ	0xFE2
   712                           fsr1l	equ	0xFE1
   713                           bsr	equ	0xFE0
   714                           indf2	equ	0xFDF
   715                           postinc2	equ	0xFDE
   716                           postdec2	equ	0xFDD
   717                           preinc2	equ	0xFDC
   718                           plusw2	equ	0xFDB
   719                           fsr2h	equ	0xFDA
   720                           fsr2l	equ	0xFD9
   721                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     14      14
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          244      0       0
    BANK15          128      0       0

Pointer List with Targets:

    LCD_String_xy@msg	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_2(CODE[26]), STR_1(CODE[5]), 

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_2(CODE[26]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_LCD_String_xy
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1906
                           _LCD_Init
                      _LCD_String_xy
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        5     2      3    1244
                                              9 COMRAM     5     2      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2     463
                                              7 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             1     1      0     342
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0     662
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          1     1      0     342
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (4) _MSdelay                                              6     4      2     320
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String_xy
     _LCD_Command
       _MSdelay
     _LCD_String
       _LCD_Char
         _MSdelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      E       E       1       11.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK14           F4      0       0      33        0.0%
BANK14              F4      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM_1            80      0       0      37        0.0%
BIGRAM             EF3      0       0      38        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Oct  2 04:20:09 2019

           ?_LCD_Command 0001                       l31 113E                       l40 115A  
                     l25 110A                       l26 110A                       l51 10AA  
                     l37 1176                       l46 10E0                       l59 106A  
                     u50 1050                       u51 104C                       u60 106A  
                     u61 1066                       u70 10E0                       u71 10DC  
                     u80 107E                       u81 107A              __CFG_BORV$3 000000  
            ?_LCD_String 0008             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000  
            __CFG_WDT$ON 000000                      l811 1022                      l821 103A  
                    l813 102E                      l823 1050                      l831 1148  
                    l825 1054                      l841 1162                      l833 114A  
                    l819 1036                      l843 1164                      l835 114C  
                    l827 1142                      l851 10AC                      l845 1166  
                    l861 111E                      l837 114E                      l829 1146  
                    l853 10B0                      l847 1168                      l839 115E  
                    l863 1122                      l855 10C0                      l871 1086  
                    l849 116A                      l857 10C4                      l873 1090  
                    l865 106E                      l881 10E6                      l859 1112  
                    l875 1098                      l867 106E                      l883 10F8  
                    l877 109E                      l869 107E                      l879 10E2  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000              LCD_Char@dat 0007  
                   STR_1 101B                     STR_2 1001                     _LATB 000F8A  
                   _main 10E2                     start 0000          __end_of_MSdelay 106C  
          __CFG_IESO$OFF 000000            _LCD_String_xy 106C            __CFG_MCLRE$ON 000000  
           ___param_bank 000000         __end_of_LCD_Char 115C         __end_of_LCD_Init 1140  
                  ?_main 0001                    _LATD0 007C60                    _LATD1 007C61  
                  _TRISB 000F93                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    tablat 000FF5                    status 000FD8  
    __size_of_LCD_String 0036           ?_LCD_String_xy 000A          __initialization 1178  
           __end_of_main 1112                   ??_main 000F            __activetblptr 000001  
       LCD_String_xy@msg 000B         LCD_String_xy@pos 000A         LCD_String_xy@row 000D  
              ??_MSdelay 0003           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
   __size_of_LCD_Command 001C             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ?_LCD_Char 0001  
             __accesstop 0080  __end_of__initialization 1178                ?_LCD_Init 0001  
        __CFG_PBADEN$OFF 000000          ??_LCD_String_xy 000D            ___rparam_used 000001  
         __pcstackCOMRAM 0001             ??_LCD_String 000A               ??_LCD_Char 0007  
             ??_LCD_Init 0008       __end_of_LCD_String 10E2                  _MSdelay 1022  
          LCD_String@msg 0008                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 1000                  __pcinit 1178                  __ramtop 1000  
                __ptext0 10E2                  __ptext1 106C                  __ptext2 10AC  
                __ptext3 1140                  __ptext4 1112                  __ptext5 115C  
                __ptext6 1022     end_of_initialization 1178           LCD_Command@cmd 0007  
      __size_of_LCD_Char 001C        __size_of_LCD_Init 002E            ??_LCD_Command 0007  
    start_initialization 1178         __CFG_OSC$INTIO67 000000    __end_of_LCD_String_xy 10AC  
       __CFG_LPT1OSC$OFF 000000      __end_of_LCD_Command 1178                 ?_MSdelay 0001  
      __CFG_CCP2MX$PORTC 000000              __smallconst 1000    LCD_String_xy@location 000E  
               MSdelay@i 0003                 MSdelay@j 0005                 _LCD_Char 1140  
               _LCD_Init 1112         __CFG_WDTPS$32768 000000              _LCD_Command 115C  
       __size_of_MSdelay 004A                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000            __size_of_main 0030  
             MSdelay@val 0001               _LCD_String 10AC   __size_of_LCD_String_xy 0040  
