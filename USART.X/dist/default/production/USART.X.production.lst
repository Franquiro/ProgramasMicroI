

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Oct 12 07:36:30 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 2.10
    19                           ; Generated 31/07/2019 GMT
    20                           ; 
    21                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4620 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	idataCOMRAM
    54  00FE9C                     __pidataCOMRAM:
    55                           	opt callstack 0
    56                           
    57                           ;initializer for sendResponse@F2928
    58  00FE9C  43                 	db	67
    59  00FE9D  6F                 	db	111
    60  00FE9E  6D                 	db	109
    61  00FE9F  6F                 	db	111
    62  00FEA0  20                 	db	32
    63  00FEA1  65                 	db	101
    64  00FEA2  73                 	db	115
    65  00FEA3  74                 	db	116
    66  00FEA4  61                 	db	97
    67  00FEA5  73                 	db	115
    68  00FEA6  3F                 	db	63
    69  00FEA7  00                 	db	0
    70  0000                     _PIE1	set	3997
    71  0000                     _PIR1	set	3998
    72  0000                     _INTCON	set	4082
    73  0000                     _BAUDCON	set	4024
    74  0000                     _RCSTA	set	4011
    75  0000                     _TXSTA	set	4012
    76  0000                     _SPBRG	set	4015
    77  0000                     _TRISC	set	3988
    78  0000                     _TXREG	set	4013
    79  0000                     _RCREG	set	4014
    80  0000                     _RCIF	set	31989
    81                           
    82                           ; #config settings
    83  0000                     
    84                           	psect	cinit
    85  00FEDA                     __pcinit:
    86                           	opt callstack 0
    87  00FEDA                     start_initialization:
    88                           	opt callstack 0
    89  00FEDA                     __initialization:
    90                           	opt callstack 0
    91                           
    92                           ; Initialize objects allocated to COMRAM (12 bytes)
    93                           ; load TBLPTR registers with __pidataCOMRAM
    94  00FEDA  0E9C               	movlw	low __pidataCOMRAM
    95  00FEDC  6EF6               	movwf	tblptrl,c
    96  00FEDE  0EFE               	movlw	high __pidataCOMRAM
    97  00FEE0  6EF7               	movwf	tblptrh,c
    98  00FEE2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    99  00FEE4  6EF8               	movwf	tblptru,c
   100  00FEE6  EE00  F057         	lfsr	0,__pdataCOMRAM
   101  00FEEA  EE10 F00C          	lfsr	1,12
   102  00FEEE                     copy_data0:
   103  00FEEE  0009               	tblrd		*+
   104  00FEF0  CFF5 FFEE          	movff	tablat,postinc0
   105  00FEF4  50E5               	movf	postdec1,w,c
   106  00FEF6  50E1               	movf	fsr1l,w,c
   107  00FEF8  E1FA               	bnz	copy_data0
   108                           
   109                           ; Clear objects allocated to COMRAM (32 bytes)
   110  00FEFA  EE00  F037         	lfsr	0,__pbssCOMRAM
   111  00FEFE  0E20               	movlw	32
   112  00FF00                     clear_0:
   113  00FF00  6AEE               	clrf	postinc0,c
   114  00FF02  06E8               	decf	wreg,f,c
   115  00FF04  E1FD               	bnz	clear_0
   116  00FF06                     end_of_initialization:
   117                           	opt callstack 0
   118  00FF06                     __end_of__initialization:
   119                           	opt callstack 0
   120  00FF06  0100               	movlb	0
   121  00FF08  EF54  F07F         	goto	_main	;jump to C main() function
   122                           
   123                           	psect	bssCOMRAM
   124  000037                     __pbssCOMRAM:
   125                           	opt callstack 0
   126  000037                     	ds	32
   127                           
   128                           	psect	dataCOMRAM
   129  000057                     __pdataCOMRAM:
   130                           	opt callstack 0
   131  000057                     sendResponse@F2928:
   132                           	opt callstack 0
   133  000057                     	ds	12
   134                           
   135                           	psect	cstackCOMRAM
   136  000001                     __pcstackCOMRAM:
   137                           	opt callstack 0
   138  000001                     ?_strlen:
   139                           	opt callstack 0
   140  000001                     strlen@s:
   141                           	opt callstack 0
   142                           
   143                           ; 2 bytes @ 0x0
   144  000001                     	ds	2
   145  000003                     strlen@a:
   146                           	opt callstack 0
   147                           
   148                           ; 2 bytes @ 0x2
   149  000003                     	ds	2
   150  000005                     sendResponse@msj:
   151                           	opt callstack 0
   152                           
   153                           ; 2 bytes @ 0x4
   154  000005                     	ds	2
   155  000007                     sendResponse@respuesta:
   156                           	opt callstack 0
   157                           
   158                           ; 12 bytes @ 0x6
   159  000007                     	ds	12
   160  000013                     sendResponse@i:
   161                           	opt callstack 0
   162                           
   163                           ; 2 bytes @ 0x12
   164  000013                     	ds	2
   165  000015                     listenUSART@mensaje:
   166                           	opt callstack 0
   167                           
   168                           ; 32 bytes @ 0x14
   169  000015                     	ds	32
   170  000035                     listenUSART@i:
   171                           	opt callstack 0
   172                           
   173                           ; 2 bytes @ 0x34
   174  000035                     	ds	2
   175  000037                     
   176                           ; 1 bytes @ 0x36
   177 ;;
   178 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   179 ;;
   180 ;; *************** function _main *****************
   181 ;; Defined at:
   182 ;;		line 15 in file "main.c"
   183 ;; Parameters:    Size  Location     Type
   184 ;;		None
   185 ;; Auto vars:     Size  Location     Type
   186 ;;		None
   187 ;; Return value:  Size  Location     Type
   188 ;;                  1    wreg      void 
   189 ;; Registers used:
   190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   191 ;; Tracked objects:
   192 ;;		On entry : 0/0
   193 ;;		On exit  : 0/0
   194 ;;		Unchanged: 0/0
   195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   200 ;;Total ram usage:        0 bytes
   201 ;; Hardware stack levels required when called:    3
   202 ;; This function calls:
   203 ;;		_USARTconfig
   204 ;;		_listenUSART
   205 ;; This function is called by:
   206 ;;		Startup code after reset
   207 ;; This function uses a non-reentrant model
   208 ;;
   209                           
   210                           	psect	text0
   211  00FEA8                     __ptext0:
   212                           	opt callstack 0
   213  00FEA8                     _main:
   214                           	opt callstack 28
   215  00FEA8                     
   216                           ;main.c: 19:     USARTconfig();
   217  00FEA8  EC5C  F07F         	call	_USARTconfig	;wreg free
   218  00FEAC                     l824:
   219  00FEAC  ECCC  F07F         	call	_listenUSART	;wreg free
   220  00FEB0  EF56  F07F         	goto	l824
   221  00FEB4  EF00  F000         	goto	start
   222  00FEB8                     __end_of_main:
   223                           	opt callstack 0
   224                           
   225 ;; *************** function _listenUSART *****************
   226 ;; Defined at:
   227 ;;		line 26 in file "main.c"
   228 ;; Parameters:    Size  Location     Type
   229 ;;		None
   230 ;; Auto vars:     Size  Location     Type
   231 ;;  mensaje        32   20[COMRAM] unsigned char [32]
   232 ;;  i               2   52[COMRAM] int 
   233 ;; Return value:  Size  Location     Type
   234 ;;                  1    wreg      void 
   235 ;; Registers used:
   236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   237 ;; Tracked objects:
   238 ;;		On entry : 0/0
   239 ;;		On exit  : 0/0
   240 ;;		Unchanged: 0/0
   241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   243 ;;      Locals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   245 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   246 ;;Total ram usage:       34 bytes
   247 ;; Hardware stack levels used:    1
   248 ;; Hardware stack levels required when called:    2
   249 ;; This function calls:
   250 ;;		_sendResponse
   251 ;; This function is called by:
   252 ;;		_main
   253 ;; This function uses a non-reentrant model
   254 ;;
   255                           
   256                           	psect	text1
   257  00FF98                     __ptext1:
   258                           	opt callstack 0
   259  00FF98                     _listenUSART:
   260                           	opt callstack 28
   261  00FF98                     
   262                           ;main.c: 27:     unsigned char mensaje[32] = {0};
   263  00FF98  EE20  F015         	lfsr	2,listenUSART@mensaje
   264  00FF9C  0E1F               	movlw	31
   265  00FF9E                     u101:
   266  00FF9E  6ADE               	clrf	postinc2,c
   267  00FFA0  06E8               	decf	wreg,f,c
   268  00FFA2  E2FD               	bc	u101
   269  00FFA4                     
   270                           ;main.c: 28:     int i = 0;
   271  00FFA4  0E00               	movlw	0
   272  00FFA6  6E36               	movwf	(listenUSART@i+1)^0,c
   273  00FFA8  0E00               	movlw	0
   274  00FFAA  6E35               	movwf	listenUSART@i^0,c
   275                           
   276                           ;main.c: 29:     while(RCIF){
   277  00FFAC  EFE2  F07F         	goto	l814
   278  00FFB0                     l810:
   279                           
   280                           ;main.c: 30:         mensaje[i] = RCREG;
   281  00FFB0  0E15               	movlw	low listenUSART@mensaje
   282  00FFB2  2435               	addwf	listenUSART@i^0,w,c
   283  00FFB4  6ED9               	movwf	fsr2l,c
   284  00FFB6  0E00               	movlw	high listenUSART@mensaje
   285  00FFB8  2036               	addwfc	(listenUSART@i+1)^0,w,c
   286  00FFBA  6EDA               	movwf	fsr2h,c
   287  00FFBC  CFAE FFDF          	movff	4014,indf2	;volatile
   288  00FFC0                     
   289                           ;main.c: 31:         i++;
   290  00FFC0  4A35               	infsnz	listenUSART@i^0,f,c
   291  00FFC2  2A36               	incf	(listenUSART@i+1)^0,f,c
   292  00FFC4                     l814:
   293                           
   294                           ;main.c: 29:     while(RCIF){
   295  00FFC4  BA9E               	btfsc	3998,5,c	;volatile
   296  00FFC6  EFE7  F07F         	goto	u111
   297  00FFCA  EFE9  F07F         	goto	u110
   298  00FFCE                     u111:
   299  00FFCE  EFD8  F07F         	goto	l810
   300  00FFD2                     u110:
   301  00FFD2                     
   302                           ;main.c: 33:     if(mensaje[0]){
   303  00FFD2  5015               	movf	listenUSART@mensaje^0,w,c
   304  00FFD4  B4D8               	btfsc	status,2,c
   305  00FFD6  EFEF  F07F         	goto	u121
   306  00FFDA  EFF1  F07F         	goto	u120
   307  00FFDE                     u121:
   308  00FFDE  EFFF  F07F         	goto	l47
   309  00FFE2                     u120:
   310  00FFE2                     
   311                           ;main.c: 34:         mensaje[i] = '\0';
   312  00FFE2  0E15               	movlw	low listenUSART@mensaje
   313  00FFE4  2435               	addwf	listenUSART@i^0,w,c
   314  00FFE6  6ED9               	movwf	fsr2l,c
   315  00FFE8  0E00               	movlw	high listenUSART@mensaje
   316  00FFEA  2036               	addwfc	(listenUSART@i+1)^0,w,c
   317  00FFEC  6EDA               	movwf	fsr2h,c
   318  00FFEE  0E00               	movlw	0
   319  00FFF0  6EDF               	movwf	indf2,c
   320  00FFF2                     
   321                           ;main.c: 35:         sendResponse(mensaje);
   322  00FFF2  0E15               	movlw	low listenUSART@mensaje
   323  00FFF4  6E05               	movwf	sendResponse@msj^0,c
   324  00FFF6  0E00               	movlw	high listenUSART@mensaje
   325  00FFF8  6E06               	movwf	(sendResponse@msj+1)^0,c
   326  00FFFA  ECA1  F07F         	call	_sendResponse	;wreg free
   327  00FFFE                     l47:
   328  00FFFE  0012               	return		;funcret
   329  010000                     __end_of_listenUSART:
   330                           	opt callstack 0
   331                           
   332 ;; *************** function _sendResponse *****************
   333 ;; Defined at:
   334 ;;		line 39 in file "main.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;  msj             2    4[COMRAM] PTR unsigned char 
   337 ;;		 -> listenUSART@mensaje(32), 
   338 ;; Auto vars:     Size  Location     Type
   339 ;;  respuesta      12    6[COMRAM] unsigned char [12]
   340 ;;  i               2   18[COMRAM] int 
   341 ;; Return value:  Size  Location     Type
   342 ;;                  1    wreg      void 
   343 ;; Registers used:
   344 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : 0/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   351 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   353 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   354 ;;Total ram usage:       16 bytes
   355 ;; Hardware stack levels used:    1
   356 ;; Hardware stack levels required when called:    1
   357 ;; This function calls:
   358 ;;		_strlen
   359 ;; This function is called by:
   360 ;;		_listenUSART
   361 ;; This function uses a non-reentrant model
   362 ;;
   363                           
   364                           	psect	text2
   365  00FF42                     __ptext2:
   366                           	opt callstack 0
   367  00FF42                     _sendResponse:
   368                           	opt callstack 28
   369  00FF42                     
   370                           ;main.c: 40:     unsigned char respuesta[12] = "Como estas?";
   371  00FF42  EE20  F057         	lfsr	2,sendResponse@F2928
   372  00FF46  EE10  F007         	lfsr	1,sendResponse@respuesta
   373  00FF4A  0E0B               	movlw	11
   374  00FF4C                     u81:
   375  00FF4C  CFDB FFE3          	movff	plusw2,plusw1
   376  00FF50  06E8               	decf	wreg,f,c
   377  00FF52  E2FC               	bc	u81
   378  00FF54                     
   379                           ;main.c: 45:     for(i = 0 ; i < strlen(respuesta) ; i++){
   380  00FF54  0E00               	movlw	0
   381  00FF56  6E14               	movwf	(sendResponse@i+1)^0,c
   382  00FF58  0E00               	movlw	0
   383  00FF5A  6E13               	movwf	sendResponse@i^0,c
   384  00FF5C  EFBA  F07F         	goto	l804
   385  00FF60                     l800:
   386                           
   387                           ;main.c: 46:         TXREG = respuesta[i];
   388  00FF60  0E07               	movlw	low sendResponse@respuesta
   389  00FF62  2413               	addwf	sendResponse@i^0,w,c
   390  00FF64  6ED9               	movwf	fsr2l,c
   391  00FF66  0E00               	movlw	high sendResponse@respuesta
   392  00FF68  2014               	addwfc	(sendResponse@i+1)^0,w,c
   393  00FF6A  6EDA               	movwf	fsr2h,c
   394  00FF6C  50DF               	movf	indf2,w,c
   395  00FF6E  6EAD               	movwf	173,c	;volatile
   396  00FF70                     
   397                           ;main.c: 47:     }
   398  00FF70  4A13               	infsnz	sendResponse@i^0,f,c
   399  00FF72  2A14               	incf	(sendResponse@i+1)^0,f,c
   400  00FF74                     l804:
   401  00FF74  0E07               	movlw	low sendResponse@respuesta
   402  00FF76  6E01               	movwf	strlen@s^0,c
   403  00FF78  0E00               	movlw	high sendResponse@respuesta
   404  00FF7A  6E02               	movwf	(strlen@s+1)^0,c
   405  00FF7C  EC86  F07F         	call	_strlen	;wreg free
   406  00FF80  5001               	movf	?_strlen^0,w,c
   407  00FF82  5C13               	subwf	sendResponse@i^0,w,c
   408  00FF84  5002               	movf	(?_strlen+1)^0,w,c
   409  00FF86  5814               	subwfb	(sendResponse@i+1)^0,w,c
   410  00FF88  A0D8               	btfss	status,0,c
   411  00FF8A  EFC9  F07F         	goto	u91
   412  00FF8E  EFCB  F07F         	goto	u90
   413  00FF92                     u91:
   414  00FF92  EFB0  F07F         	goto	l800
   415  00FF96                     u90:
   416  00FF96  0012               	return		;funcret
   417  00FF98                     __end_of_sendResponse:
   418                           	opt callstack 0
   419                           
   420 ;; *************** function _strlen *****************
   421 ;; Defined at:
   422 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/strlen.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;  s               2    0[COMRAM] PTR const unsigned char 
   425 ;;		 -> sendResponse@respuesta(12), 
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  a               2    2[COMRAM] PTR const unsigned char 
   428 ;;		 -> sendResponse@respuesta(12), 
   429 ;; Return value:  Size  Location     Type
   430 ;;                  2    0[COMRAM] unsigned int 
   431 ;; Registers used:
   432 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   441 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   442 ;;Total ram usage:        4 bytes
   443 ;; Hardware stack levels used:    1
   444 ;; This function calls:
   445 ;;		Nothing
   446 ;; This function is called by:
   447 ;;		_sendResponse
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           	psect	text3
   452  00FF0C                     __ptext3:
   453                           	opt callstack 0
   454  00FF0C                     _strlen:
   455                           	opt callstack 28
   456  00FF0C  C001  F003         	movff	strlen@s,strlen@a
   457  00FF10  C002  F004         	movff	strlen@s+1,strlen@a+1
   458  00FF14  EF8E  F07F         	goto	l788
   459  00FF18                     l786:
   460  00FF18  4A01               	infsnz	strlen@s^0,f,c
   461  00FF1A  2A02               	incf	(strlen@s+1)^0,f,c
   462  00FF1C                     l788:
   463  00FF1C  C001  FFD9         	movff	strlen@s,fsr2l
   464  00FF20  C002  FFDA         	movff	strlen@s+1,fsr2h
   465  00FF24  50DF               	movf	indf2,w,c
   466  00FF26  A4D8               	btfss	status,2,c
   467  00FF28  EF98  F07F         	goto	u71
   468  00FF2C  EF9A  F07F         	goto	u70
   469  00FF30                     u71:
   470  00FF30  EF8C  F07F         	goto	l786
   471  00FF34                     u70:
   472  00FF34  5003               	movf	strlen@a^0,w,c
   473  00FF36  5C01               	subwf	strlen@s^0,w,c
   474  00FF38  6E01               	movwf	?_strlen^0,c
   475  00FF3A  5004               	movf	(strlen@a+1)^0,w,c
   476  00FF3C  5802               	subwfb	(strlen@s+1)^0,w,c
   477  00FF3E  6E02               	movwf	(?_strlen+1)^0,c
   478  00FF40  0012               	return		;funcret
   479  00FF42                     __end_of_strlen:
   480                           	opt callstack 0
   481                           
   482 ;; *************** function _USARTconfig *****************
   483 ;; Defined at:
   484 ;;		line 50 in file "main.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		wreg, status,2
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   502 ;;Total ram usage:        0 bytes
   503 ;; Hardware stack levels used:    1
   504 ;; This function calls:
   505 ;;		Nothing
   506 ;; This function is called by:
   507 ;;		_main
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           	psect	text4
   512  00FEB8                     __ptext4:
   513                           	opt callstack 0
   514  00FEB8                     _USARTconfig:
   515                           	opt callstack 30
   516  00FEB8                     
   517                           ;main.c: 68:     TRISC = 0xBF;
   518  00FEB8  0EBF               	movlw	191
   519  00FEBA  6E94               	movwf	148,c	;volatile
   520                           
   521                           ;main.c: 69:     SPBRG = 0x19;
   522  00FEBC  0E19               	movlw	25
   523  00FEBE  6EAF               	movwf	175,c	;volatile
   524                           
   525                           ;main.c: 70:     TXSTA = 0x24;
   526  00FEC0  0E24               	movlw	36
   527  00FEC2  6EAC               	movwf	172,c	;volatile
   528                           
   529                           ;main.c: 81:     RCSTA = 0x90;
   530  00FEC4  0E90               	movlw	144
   531  00FEC6  6EAB               	movwf	171,c	;volatile
   532                           
   533                           ;main.c: 91:     BAUDCON = 0x40;
   534  00FEC8  0E40               	movlw	64
   535  00FECA  6EB8               	movwf	184,c	;volatile
   536                           
   537                           ;main.c: 100:    INTCON = 0xC0;
   538  00FECC  0EC0               	movlw	192
   539  00FECE  6EF2               	movwf	242,c	;volatile
   540                           
   541                           ;main.c: 101:    PIR1=0x00;
   542  00FED0  0E00               	movlw	0
   543  00FED2  6E9E               	movwf	158,c	;volatile
   544                           
   545                           ;main.c: 102:    PIE1 = 0x00;
   546  00FED4  0E00               	movlw	0
   547  00FED6  6E9D               	movwf	157,c	;volatile
   548  00FED8  0012               	return		;funcret
   549  00FEDA                     __end_of_USARTconfig:
   550                           	opt callstack 0
   551  0000                     
   552                           	psect	rparam
   553  0000                     tosu	equ	0xFFF
   554                           tosh	equ	0xFFE
   555                           tosl	equ	0xFFD
   556                           stkptr	equ	0xFFC
   557                           pclatu	equ	0xFFB
   558                           pclath	equ	0xFFA
   559                           pcl	equ	0xFF9
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           prodh	equ	0xFF4
   565                           prodl	equ	0xFF3
   566                           indf0	equ	0xFEF
   567                           postinc0	equ	0xFEE
   568                           postdec0	equ	0xFED
   569                           preinc0	equ	0xFEC
   570                           plusw0	equ	0xFEB
   571                           fsr0h	equ	0xFEA
   572                           fsr0l	equ	0xFE9
   573                           wreg	equ	0xFE8
   574                           indf1	equ	0xFE7
   575                           postinc1	equ	0xFE6
   576                           postdec1	equ	0xFE5
   577                           preinc1	equ	0xFE4
   578                           plusw1	equ	0xFE3
   579                           fsr1h	equ	0xFE2
   580                           fsr1l	equ	0xFE1
   581                           bsr	equ	0xFE0
   582                           indf2	equ	0xFDF
   583                           postinc2	equ	0xFDE
   584                           postdec2	equ	0xFDD
   585                           preinc2	equ	0xFDC
   586                           plusw2	equ	0xFDB
   587                           fsr2h	equ	0xFDA
   588                           fsr2l	equ	0xFD9
   589                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     54      98
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sendResponse@msj	PTR unsigned char  size(2) Largest target is 32
		 -> listenUSART@mensaje(COMRAM[32]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 12
		 -> sendResponse@respuesta(COMRAM[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 12
		 -> sendResponse@respuesta(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_listenUSART
    _listenUSART->_sendResponse
    _sendResponse->_strlen

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     475
                        _USARTconfig
                        _listenUSART
 ---------------------------------------------------------------------------------
 (1) _listenUSART                                         34    34      0     475
                                             20 COMRAM    34    34      0
                       _sendResponse
 ---------------------------------------------------------------------------------
 (2) _sendResponse                                        16    14      2     336
                                              4 COMRAM    16    14      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTconfig                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTconfig
   _listenUSART
     _sendResponse
       _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     36      62       1       77.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      62      34        0.0%
DATA                 0      0      62       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Oct 12 07:36:30 2019

            _USARTconfig FEB8                       l55 FF96                       l47 FFFE  
                     l58 FED8                       u70 FF34                       u71 FF30  
                     u81 FF4C                       u90 FF96                       u91 FF92  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000  
                    l800 FF60                      l802 FF70                      l810 FFB0  
                    l804 FF74                      l820 FFF2                      l812 FFC0  
                    l814 FFC4                      l806 FF98                      l822 FEA8  
                    l816 FFD2                      l808 FFA4                      l824 FEAC  
                    l762 FEB8                      l738 FF40                      l818 FFE2  
                    l790 FF34                      l784 FF0C                      l786 FF18  
                    l794 FF42                      l788 FF1C                      l796 FF54  
                    l798 FF54             __CFG_CPB$OFF 000000                      u101 FF9E  
                    u110 FFD2                      u111 FFCE                      u120 FFE2  
                    u121 FFDE             __CFG_CPD$OFF 000000                      wreg 000FE8  
           __CFG_WDT$OFF 000000         listenUSART@F2923 0037                     _PIE1 000F9D  
                   _RCIF 007CF5                     _PIR1 000F9E                     _main FEA8  
                   fsr2h 000FDA                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ?_main 0001  
                  _RCREG 000FAE                    _RCSTA 000FAB                    _SPBRG 000FAF  
                  _TRISC 000F94                    _TXREG 000FAD                    _TXSTA 000FAC  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    tablat 000FF5  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
        __initialization FEDA             __end_of_main FEB8             ?_listenUSART 0001  
                 ??_main 0037            __activetblptr 000000                   _INTCON 000FF2  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                   clear_0 FF00  
                 _strlen FF0C             __pdataCOMRAM 0057                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization FF06          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001       listenUSART@mensaje 0015             ?_USARTconfig 0001  
          ?_sendResponse 0005                  _BAUDCON 000FB8     __size_of_listenUSART 0068  
                ?_strlen 0001           ??_sendResponse 0007                  __Hparam 0000  
                __Lparam 0000                  __pcinit FEDA                  __ramtop 1000  
                __ptext0 FEA8                  __ptext1 FF98                  __ptext2 FF42  
                __ptext3 FF0C                  __ptext4 FEB8          __size_of_strlen 0036  
          sendResponse@i 0013     end_of_initialization FF06                  postdec1 000FE5  
                postinc0 000FEE                  postinc2 000FDE     __size_of_USARTconfig 0022  
                strlen@a 0003                  strlen@s 0001    sendResponse@respuesta 0007  
          __pidataCOMRAM FE9C     __end_of_sendResponse FF98           __end_of_strlen FF42  
    start_initialization FEDA         __CFG_OSC$INTIO67 000000         __CFG_LPT1OSC$OFF 000000  
               ??_strlen 0003              __pbssCOMRAM 0037             listenUSART@i 0035  
      __CFG_CCP2MX$PORTC 000000            ??_listenUSART 0015          sendResponse@msj 0005  
       __CFG_WDTPS$32768 000000    __size_of_sendResponse 0056      __end_of_listenUSART 0000  
              copy_data0 FEEE             _sendResponse FF42                 __Hrparam 0000  
               __Lrparam 0000            ??_USARTconfig 0001       __CFG_BOREN$SBORDIS 000000  
      sendResponse@F2928 0057            __size_of_main 0010              _listenUSART FF98  
    __end_of_USARTconfig FEDA  
