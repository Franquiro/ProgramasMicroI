

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Oct  8 20:45:17 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    28  0000                     
    29                           ; Version 2.10
    30                           ; Generated 31/07/2019 GMT
    31                           ; 
    32                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4620 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     _TMR0	set	4054
    64  0000                     _ADRESL	set	4035
    65  0000                     _ADRESH	set	4036
    66  0000                     _ADCON0bits	set	4034
    67  0000                     _LATD	set	3980
    68  0000                     _TRISD	set	3989
    69  0000                     _ADCON2	set	4032
    70  0000                     _ADCON1	set	4033
    71  0000                     _ADCON0	set	4034
    72  0000                     _T0CON	set	4053
    73  0000                     _INTCON	set	4082
    74  0000                     _TRISE	set	3990
    75  0000                     _LATE	set	3981
    76  0000                     _OSCCON	set	4051
    77  0000                     _ADIF	set	31990
    78  0000                     _TMR0IF	set	32658
    79  0000                     _GIE	set	32663
    80  0000                     _LATD3	set	31843
    81  0000                     _LATD2	set	31842
    82  0000                     _ADIE	set	31982
    83                           
    84                           	psect	smallconst
    85  001000                     __psmallconst:
    86                           	opt callstack 0
    87  001000  00                 	db	0
    88  001001                     STR_1:
    89  001001  4C                 	db	76	;'L'
    90  001002  65                 	db	101	;'e'
    91  001003  63                 	db	99	;'c'
    92  001004  74                 	db	116	;'t'
    93  001005  75                 	db	117	;'u'
    94  001006  72                 	db	114	;'r'
    95  001007  61                 	db	97	;'a'
    96  001008  20                 	db	32
    97  001009  41                 	db	65	;'A'
    98  00100A  44                 	db	68	;'D'
    99  00100B  43                 	db	67	;'C'
   100  00100C  00                 	db	0
   101  00100D                     STR_2:
   102  00100D  56                 	db	86	;'V'
   103  00100E  61                 	db	97	;'a'
   104  00100F  6C                 	db	108	;'l'
   105  001010  6F                 	db	111	;'o'
   106  001011  72                 	db	114	;'r'
   107  001012  00                 	db	0
   108                           
   109                           ; #config settings
   110  001013  00                 	db	0	; dummy byte at the end
   111  0000                     
   112                           	psect	cinit
   113  001636                     __pcinit:
   114                           	opt callstack 0
   115  001636                     start_initialization:
   116                           	opt callstack 0
   117  001636                     __initialization:
   118                           	opt callstack 0
   119                           
   120                           ; Clear objects allocated to COMRAM (5 bytes)
   121  001636  6A3C               	clrf	(__pbssCOMRAM+4)& (0+255),c
   122  001638  6A3B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   123  00163A  6A3A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   124  00163C  6A39               	clrf	(__pbssCOMRAM+1)& (0+255),c
   125  00163E  6A38               	clrf	__pbssCOMRAM& (0+255),c
   126  001640                     end_of_initialization:
   127                           	opt callstack 0
   128  001640                     __end_of__initialization:
   129                           	opt callstack 0
   130  001640  903D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   131  001642  923D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   132  001644  0E00               	movlw	low (__Lmediumconst shr (0+16))
   133  001646  6EF8               	movwf	tblptru,c
   134  001648  0100               	movlb	0
   135  00164A  EFD4  F009         	goto	_main	;jump to C main() function
   136                           
   137                           	psect	bssCOMRAM
   138  000038                     __pbssCOMRAM:
   139                           	opt callstack 0
   140  000038                     LCD_Num_xy@F2469:
   141                           	opt callstack 0
   142  000038                     	ds	5
   143                           
   144                           	psect	cstackCOMRAM
   145  000001                     __pcstackCOMRAM:
   146                           	opt callstack 0
   147  000001                     ?___awdiv:
   148                           	opt callstack 0
   149  000001                     ?___awmod:
   150                           	opt callstack 0
   151  000001                     ___awdiv@dividend:
   152                           	opt callstack 0
   153  000001                     ___awmod@dividend:
   154                           	opt callstack 0
   155  000001                     i2MSdelay@val:
   156                           	opt callstack 0
   157                           
   158                           ; 2 bytes @ 0x0
   159  000001                     	ds	2
   160  000003                     ___awdiv@divisor:
   161                           	opt callstack 0
   162  000003                     ___awmod@divisor:
   163                           	opt callstack 0
   164  000003                     i2MSdelay@i:
   165                           	opt callstack 0
   166                           
   167                           ; 2 bytes @ 0x2
   168  000003                     	ds	2
   169  000005                     ___awdiv@counter:
   170                           	opt callstack 0
   171  000005                     ___awmod@counter:
   172                           	opt callstack 0
   173  000005                     i2MSdelay@j:
   174                           	opt callstack 0
   175                           
   176                           ; 2 bytes @ 0x4
   177  000005                     	ds	1
   178  000006                     ___awdiv@sign:
   179                           	opt callstack 0
   180  000006                     ___awmod@sign:
   181                           	opt callstack 0
   182                           
   183                           ; 1 bytes @ 0x5
   184  000006                     	ds	1
   185  000007                     ??i2_LCD_Command:
   186  000007                     ??i2_LCD_Char:
   187  000007                     ___awdiv@quotient:
   188                           	opt callstack 0
   189                           
   190                           ; 2 bytes @ 0x6
   191  000007                     	ds	1
   192  000008                     i2LCD_Command@cmd:
   193                           	opt callstack 0
   194  000008                     i2LCD_Char@dat:
   195                           	opt callstack 0
   196                           
   197                           ; 1 bytes @ 0x7
   198  000008                     	ds	1
   199  000009                     i2LCD_String@msg:
   200                           	opt callstack 0
   201                           
   202                           ; 2 bytes @ 0x8
   203  000009                     	ds	2
   204  00000B                     LCD_Num_xy@pos:
   205                           	opt callstack 0
   206                           
   207                           ; 1 bytes @ 0xA
   208  00000B                     	ds	1
   209  00000C                     LCD_Num_xy@msg:
   210                           	opt callstack 0
   211                           
   212                           ; 2 bytes @ 0xB
   213  00000C                     	ds	2
   214  00000E                     
   215                           ; 1 bytes @ 0xD
   216  00000E                     	ds	4
   217  000012                     LCD_Num_xy@mensaje:
   218                           	opt callstack 0
   219                           
   220                           ; 5 bytes @ 0x11
   221  000012                     	ds	5
   222  000017                     LCD_Num_xy@row:
   223                           	opt callstack 0
   224                           
   225                           ; 1 bytes @ 0x16
   226  000017                     	ds	1
   227  000018                     LCD_Num_xy@location:
   228                           	opt callstack 0
   229                           
   230                           ; 1 bytes @ 0x17
   231  000018                     	ds	1
   232  000019                     LCD_Num_xy@i:
   233                           	opt callstack 0
   234                           
   235                           ; 2 bytes @ 0x18
   236  000019                     	ds	2
   237  00001B                     ??_leerADC:
   238                           
   239                           ; 1 bytes @ 0x1A
   240  00001B                     	ds	12
   241  000027                     leerADC@valor:
   242                           	opt callstack 0
   243                           
   244                           ; 2 bytes @ 0x26
   245  000027                     	ds	2
   246  000029                     MSdelay@val:
   247                           	opt callstack 0
   248                           
   249                           ; 2 bytes @ 0x28
   250  000029                     	ds	2
   251  00002B                     MSdelay@i:
   252                           	opt callstack 0
   253                           
   254                           ; 2 bytes @ 0x2A
   255  00002B                     	ds	2
   256  00002D                     MSdelay@j:
   257                           	opt callstack 0
   258                           
   259                           ; 2 bytes @ 0x2C
   260  00002D                     	ds	2
   261  00002F                     ??_LCD_Command:
   262  00002F                     ??_LCD_Char:
   263                           
   264                           ; 1 bytes @ 0x2E
   265  00002F                     	ds	1
   266  000030                     LCD_Command@cmd:
   267                           	opt callstack 0
   268  000030                     LCD_Char@dat:
   269                           	opt callstack 0
   270                           
   271                           ; 1 bytes @ 0x2F
   272  000030                     	ds	1
   273  000031                     LCD_String@msg:
   274                           	opt callstack 0
   275                           
   276                           ; 2 bytes @ 0x30
   277  000031                     	ds	2
   278  000033                     LCD_String_xy@pos:
   279                           	opt callstack 0
   280                           
   281                           ; 1 bytes @ 0x32
   282  000033                     	ds	1
   283  000034                     LCD_String_xy@msg:
   284                           	opt callstack 0
   285                           
   286                           ; 2 bytes @ 0x33
   287  000034                     	ds	2
   288  000036                     LCD_String_xy@row:
   289                           	opt callstack 0
   290                           
   291                           ; 1 bytes @ 0x35
   292  000036                     	ds	1
   293  000037                     LCD_String_xy@location:
   294                           	opt callstack 0
   295                           
   296                           ; 1 bytes @ 0x36
   297  000037                     	ds	1
   298  000038                     
   299                           ; 1 bytes @ 0x37
   300 ;;
   301 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   302 ;;
   303 ;; *************** function _main *****************
   304 ;; Defined at:
   305 ;;		line 30 in file "main.c"
   306 ;; Parameters:    Size  Location     Type
   307 ;;		None
   308 ;; Auto vars:     Size  Location     Type
   309 ;;		None
   310 ;; Return value:  Size  Location     Type
   311 ;;                  2   54[None  ] int 
   312 ;; Registers used:
   313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   314 ;; Tracked objects:
   315 ;;		On entry : 0/0
   316 ;;		On exit  : 0/0
   317 ;;		Unchanged: 0/0
   318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   323 ;;Total ram usage:        0 bytes
   324 ;; Hardware stack levels required when called:    9
   325 ;; This function calls:
   326 ;;		_LCD_Init
   327 ;;		_LCD_String_xy
   328 ;; This function is called by:
   329 ;;		Startup code after reset
   330 ;; This function uses a non-reentrant model
   331 ;;
   332                           
   333                           	psect	text0
   334  0013A8                     __ptext0:
   335                           	opt callstack 0
   336  0013A8                     _main:
   337                           	opt callstack 22
   338  0013A8                     
   339                           ;main.c: 32:     OSCCON = 0x72;
   340  0013A8  0E72               	movlw	114
   341  0013AA  6ED3               	movwf	211,c	;volatile
   342  0013AC                     
   343                           ;main.c: 34:  LCD_Init();
   344  0013AC  EC03  F00B         	call	_LCD_Init	;wreg free
   345  0013B0                     
   346                           ;main.c: 35:     LATE = 0x00;
   347  0013B0  0E00               	movlw	0
   348  0013B2  6E8D               	movwf	141,c	;volatile
   349  0013B4                     
   350                           ;main.c: 36:     TMR0 = 55536;
   351  0013B4  0ED8               	movlw	216
   352  0013B6  6ED7               	movwf	215,c	;volatile
   353  0013B8  0EF0               	movlw	240
   354  0013BA  6ED6               	movwf	214,c	;volatile
   355  0013BC                     
   356                           ;main.c: 39:     TRISE = 0x0F;
   357  0013BC  0E0F               	movlw	15
   358  0013BE  6E96               	movwf	150,c	;volatile
   359  0013C0                     
   360                           ;main.c: 42:     INTCON = 0xE0;
   361  0013C0  0EE0               	movlw	224
   362  0013C2  6EF2               	movwf	242,c	;volatile
   363  0013C4                     
   364                           ;main.c: 43:     T0CON = 0x80;
   365  0013C4  0E80               	movlw	128
   366  0013C6  6ED5               	movwf	213,c	;volatile
   367  0013C8                     
   368                           ;main.c: 44:     ADCON0 = 0x19;
   369  0013C8  0E19               	movlw	25
   370  0013CA  6EC2               	movwf	194,c	;volatile
   371  0013CC                     
   372                           ;main.c: 45:     ADCON1 = 0x08;
   373  0013CC  0E08               	movlw	8
   374  0013CE  6EC1               	movwf	193,c	;volatile
   375  0013D0                     
   376                           ;main.c: 46:     ADCON2 = 0xBC;
   377  0013D0  0EBC               	movlw	188
   378  0013D2  6EC0               	movwf	192,c	;volatile
   379  0013D4                     
   380                           ;main.c: 47:     ADIE = 1;
   381  0013D4  8C9D               	bsf	3997,6,c	;volatile
   382  0013D6                     
   383                           ;main.c: 48:  LCD_String_xy(1,1,"Lectura ADC");
   384  0013D6  0E01               	movlw	1
   385  0013D8  6E33               	movwf	LCD_String_xy@pos^0,c
   386  0013DA  0E01               	movlw	low STR_1
   387  0013DC  6E34               	movwf	LCD_String_xy@msg^0,c
   388  0013DE  0E10               	movlw	high STR_1
   389  0013E0  6E35               	movwf	(LCD_String_xy@msg+1)^0,c
   390  0013E2  0E01               	movlw	1
   391  0013E4  ECE3  F00A         	call	_LCD_String_xy
   392  0013E8                     
   393                           ;main.c: 49:     LCD_String_xy(2,3,"Valor");
   394  0013E8  0E03               	movlw	3
   395  0013EA  6E33               	movwf	LCD_String_xy@pos^0,c
   396  0013EC  0E0D               	movlw	low STR_2
   397  0013EE  6E34               	movwf	LCD_String_xy@msg^0,c
   398  0013F0  0E10               	movlw	high STR_2
   399  0013F2  6E35               	movwf	(LCD_String_xy@msg+1)^0,c
   400  0013F4  0E02               	movlw	2
   401  0013F6  ECE3  F00A         	call	_LCD_String_xy
   402  0013FA                     l55:
   403  0013FA  EFFD  F009         	goto	l55
   404  0013FE  EF07  F000         	goto	start
   405  001402                     __end_of_main:
   406                           	opt callstack 0
   407                           
   408 ;; *************** function _LCD_String_xy *****************
   409 ;; Defined at:
   410 ;;		line 107 in file "main.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;  row             1    wreg     unsigned char 
   413 ;;  pos             1   50[COMRAM] unsigned char 
   414 ;;  msg             2   51[COMRAM] PTR const unsigned char 
   415 ;;		 -> STR_2(6), STR_1(12), 
   416 ;; Auto vars:     Size  Location     Type
   417 ;;  row             1   53[COMRAM] unsigned char 
   418 ;;  location        1   54[COMRAM] unsigned char 
   419 ;; Return value:  Size  Location     Type
   420 ;;                  1    wreg      void 
   421 ;; Registers used:
   422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   423 ;; Tracked objects:
   424 ;;		On entry : 0/0
   425 ;;		On exit  : 0/0
   426 ;;		Unchanged: 0/0
   427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   428 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   431 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   432 ;;Total ram usage:        5 bytes
   433 ;; Hardware stack levels used:    1
   434 ;; Hardware stack levels required when called:    8
   435 ;; This function calls:
   436 ;;		_LCD_Command
   437 ;;		_LCD_String
   438 ;; This function is called by:
   439 ;;		_main
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           	psect	text1
   444  0015C6                     __ptext1:
   445                           	opt callstack 0
   446  0015C6                     _LCD_String_xy:
   447                           	opt callstack 22
   448                           
   449                           ;incstack = 0
   450                           ;LCD_String_xy@row stored from wreg
   451  0015C6  6E36               	movwf	LCD_String_xy@row^0,c
   452  0015C8                     
   453                           ;main.c: 110:     if(row<=1)
   454  0015C8  0E02               	movlw	2
   455  0015CA  6036               	cpfslt	LCD_String_xy@row^0,c
   456  0015CC  EFEA  F00A         	goto	u511
   457  0015D0  EFEC  F00A         	goto	u510
   458  0015D4                     u511:
   459  0015D4  EFF5  F00A         	goto	l1330
   460  0015D8                     u510:
   461  0015D8                     
   462                           ;main.c: 111:     {;main.c: 112:         location=(0x80) | ((pos) & 0x0f);
   463  0015D8  5033               	movf	LCD_String_xy@pos^0,w,c
   464  0015DA  0B0F               	andlw	15
   465  0015DC  0980               	iorlw	128
   466  0015DE  6E37               	movwf	LCD_String_xy@location^0,c
   467  0015E0                     
   468                           ;main.c: 113:         LCD_Command(location);
   469  0015E0  5037               	movf	LCD_String_xy@location^0,w,c
   470  0015E2  EC27  F00A         	call	_LCD_Command
   471                           
   472                           ;main.c: 114:     }
   473  0015E6  EFFC  F00A         	goto	l1334
   474  0015EA                     l1330:
   475                           
   476                           ;main.c: 116:     {;main.c: 117:         location=(0xC0) | ((pos) & 0x0f);
   477  0015EA  5033               	movf	LCD_String_xy@pos^0,w,c
   478  0015EC  0B0F               	andlw	15
   479  0015EE  09C0               	iorlw	192
   480  0015F0  6E37               	movwf	LCD_String_xy@location^0,c
   481  0015F2                     
   482                           ;main.c: 118:         LCD_Command(location);
   483  0015F2  5037               	movf	LCD_String_xy@location^0,w,c
   484  0015F4  EC27  F00A         	call	_LCD_Command
   485  0015F8                     l1334:
   486                           
   487                           ;main.c: 122:     LCD_String(msg);
   488  0015F8  C034  F031         	movff	LCD_String_xy@msg,LCD_String@msg
   489  0015FC  C035  F032         	movff	LCD_String_xy@msg+1,LCD_String@msg+1
   490  001600  EC72  F009         	call	_LCD_String	;wreg free
   491  001604  0012               	return		;funcret
   492  001606                     __end_of_LCD_String_xy:
   493                           	opt callstack 0
   494                           
   495 ;; *************** function _LCD_String *****************
   496 ;; Defined at:
   497 ;;		line 98 in file "main.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;  msg             2   48[COMRAM] PTR const unsigned char 
   500 ;;		 -> LCD_Num_xy@mensaje(5), STR_2(6), STR_1(12), 
   501 ;; Auto vars:     Size  Location     Type
   502 ;;		None
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : 0/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   512 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   515 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   516 ;;Total ram usage:        2 bytes
   517 ;; Hardware stack levels used:    1
   518 ;; Hardware stack levels required when called:    7
   519 ;; This function calls:
   520 ;;		_LCD_Char
   521 ;; This function is called by:
   522 ;;		_LCD_String_xy
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526                           	psect	text2
   527  0012E4                     __ptext2:
   528                           	opt callstack 0
   529  0012E4                     _LCD_String:
   530                           	opt callstack 22
   531  0012E4                     
   532                           ;main.c: 98: void LCD_String(const char *msg);main.c: 99: {;main.c: 100:  while((*msg)!=
      +                          0)
   533  0012E4  EF89  F009         	goto	l1198
   534  0012E8                     l1194:
   535                           
   536                           ;main.c: 101:  {;main.c: 102:    LCD_Char(*msg);
   537  0012E8  C031  FFF6         	movff	LCD_String@msg,tblptrl
   538  0012EC  C032  FFF7         	movff	LCD_String@msg+1,tblptrh
   539  0012F0  0E00               	movlw	low (__smallconst shr (0+16))
   540  0012F2  6EF8               	movwf	tblptru,c
   541  0012F4  0E0F               	movlw	(high __ramtop+-1)
   542  0012F6  64F7               	cpfsgt	tblptrh,c
   543  0012F8  D003               	bra	u337
   544  0012FA  0008               	tblrd		*
   545  0012FC  50F5               	movf	tablat,w,c
   546  0012FE  D005               	bra	u330
   547  001300                     u337:
   548  001300  CFF6 FFE9          	movff	tblptrl,fsr0l
   549  001304  CFF7 FFEA          	movff	tblptrh,fsr0h
   550  001308  50EF               	movf	indf0,w,c
   551  00130A                     u330:
   552  00130A  EC01  F00A         	call	_LCD_Char
   553  00130E                     
   554                           ;main.c: 103:    msg++;
   555  00130E  4A31               	infsnz	LCD_String@msg^0,f,c
   556  001310  2A32               	incf	(LCD_String@msg+1)^0,f,c
   557  001312                     l1198:
   558                           
   559                           ;main.c: 100:  while((*msg)!=0)
   560  001312  C031  FFF6         	movff	LCD_String@msg,tblptrl
   561  001316  C032  FFF7         	movff	LCD_String@msg+1,tblptrh
   562  00131A  0E00               	movlw	low (__smallconst shr (0+16))
   563  00131C  6EF8               	movwf	tblptru,c
   564  00131E  0E0F               	movlw	(high __ramtop+-1)
   565  001320  64F7               	cpfsgt	tblptrh,c
   566  001322  D003               	bra	u347
   567  001324  0008               	tblrd		*
   568  001326  50F5               	movf	tablat,w,c
   569  001328  D005               	bra	u340
   570  00132A                     u347:
   571  00132A  CFF6 FFE9          	movff	tblptrl,fsr0l
   572  00132E  CFF7 FFEA          	movff	tblptrh,fsr0h
   573  001332  50EF               	movf	indf0,w,c
   574  001334                     u340:
   575  001334  0900               	iorlw	0
   576  001336  A4D8               	btfss	status,2,c
   577  001338  EFA0  F009         	goto	u351
   578  00133C  EFA2  F009         	goto	u350
   579  001340                     u351:
   580  001340  EF74  F009         	goto	l1194
   581  001344                     u350:
   582  001344  0012               	return		;funcret
   583  001346                     __end_of_LCD_String:
   584                           	opt callstack 0
   585                           
   586 ;; *************** function _LCD_Char *****************
   587 ;; Defined at:
   588 ;;		line 84 in file "main.c"
   589 ;; Parameters:    Size  Location     Type
   590 ;;  dat             1    wreg     unsigned char 
   591 ;; Auto vars:     Size  Location     Type
   592 ;;  dat             1   47[COMRAM] unsigned char 
   593 ;; Return value:  Size  Location     Type
   594 ;;                  1    wreg      void 
   595 ;; Registers used:
   596 ;;		wreg, status,2, status,0, cstack
   597 ;; Tracked objects:
   598 ;;		On entry : 0/0
   599 ;;		On exit  : 0/0
   600 ;;		Unchanged: 0/0
   601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   605 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   606 ;;Total ram usage:        2 bytes
   607 ;; Hardware stack levels used:    1
   608 ;; Hardware stack levels required when called:    6
   609 ;; This function calls:
   610 ;;		_MSdelay
   611 ;; This function is called by:
   612 ;;		_LCD_String
   613 ;; This function uses a non-reentrant model
   614 ;;
   615                           
   616                           	psect	text3
   617  001402                     __ptext3:
   618                           	opt callstack 0
   619  001402                     _LCD_Char:
   620                           	opt callstack 22
   621                           
   622                           ;incstack = 0
   623                           ;LCD_Char@dat stored from wreg
   624  001402  6E30               	movwf	LCD_Char@dat^0,c
   625  001404                     
   626                           ;main.c: 84: void LCD_Char(unsigned char dat);main.c: 85: {;main.c: 86:  LATD = (LATD & 
      +                          0x0f) | (0xF0 & dat);
   627  001404  C030  F02F         	movff	LCD_Char@dat,??_LCD_Char
   628  001408  0EF0               	movlw	240
   629  00140A  162F               	andwf	??_LCD_Char^0,f,c
   630  00140C  508C               	movf	140,w,c	;volatile
   631  00140E  0B0F               	andlw	15
   632  001410  102F               	iorwf	??_LCD_Char^0,w,c
   633  001412  6E8C               	movwf	140,c	;volatile
   634  001414                     
   635                           ;main.c: 87:  LATD2 = 1;
   636  001414  848C               	bsf	3980,2,c	;volatile
   637  001416                     
   638                           ;main.c: 88:  LATD3 = 1;
   639  001416  868C               	bsf	3980,3,c	;volatile
   640  001418                     
   641                           ;main.c: 89:  __nop();
   642  001418  F000               	nop	
   643  00141A                     
   644                           ;main.c: 90:  LATD3 = 0;
   645  00141A  968C               	bcf	3980,3,c	;volatile
   646  00141C                     
   647                           ;main.c: 91:  MSdelay(1);
   648  00141C  0E00               	movlw	0
   649  00141E  6E2A               	movwf	(MSdelay@val+1)^0,c
   650  001420  0E01               	movlw	1
   651  001422  6E29               	movwf	MSdelay@val^0,c
   652  001424  EC99  F00A         	call	_MSdelay	;wreg free
   653  001428                     
   654                           ;main.c: 92:     LATD = (LATD & 0x0f) | (dat<<4);
   655  001428  C030  F02F         	movff	LCD_Char@dat,??_LCD_Char
   656  00142C  3A2F               	swapf	??_LCD_Char^0,f,c
   657  00142E  0EF0               	movlw	240
   658  001430  162F               	andwf	??_LCD_Char^0,f,c
   659  001432  508C               	movf	140,w,c	;volatile
   660  001434  0B0F               	andlw	15
   661  001436  102F               	iorwf	??_LCD_Char^0,w,c
   662  001438  6E8C               	movwf	140,c	;volatile
   663  00143A                     
   664                           ;main.c: 93:  LATD3 = 1;
   665  00143A  868C               	bsf	3980,3,c	;volatile
   666  00143C                     
   667                           ;main.c: 94:  __nop();
   668  00143C  F000               	nop	
   669  00143E                     
   670                           ;main.c: 95:  LATD3 = 0;
   671  00143E  968C               	bcf	3980,3,c	;volatile
   672                           
   673                           ;main.c: 96:  MSdelay(3);
   674  001440  0E00               	movlw	0
   675  001442  6E2A               	movwf	(MSdelay@val+1)^0,c
   676  001444  0E03               	movlw	3
   677  001446  6E29               	movwf	MSdelay@val^0,c
   678  001448  EC99  F00A         	call	_MSdelay	;wreg free
   679  00144C  0012               	return		;funcret
   680  00144E                     __end_of_LCD_Char:
   681                           	opt callstack 0
   682                           
   683 ;; *************** function _LCD_Init *****************
   684 ;; Defined at:
   685 ;;		line 55 in file "main.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;		None
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, status,2, status,0, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   703 ;;Total ram usage:        0 bytes
   704 ;; Hardware stack levels used:    1
   705 ;; Hardware stack levels required when called:    7
   706 ;; This function calls:
   707 ;;		_LCD_Command
   708 ;;		_MSdelay
   709 ;; This function is called by:
   710 ;;		_main
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text4
   715  001606                     __ptext4:
   716                           	opt callstack 0
   717  001606                     _LCD_Init:
   718                           	opt callstack 23
   719  001606                     
   720                           ;main.c: 57:     TRISD = 0;
   721  001606  0E00               	movlw	0
   722  001608  6E95               	movwf	149,c	;volatile
   723  00160A                     
   724                           ;main.c: 58:     MSdelay(15);
   725  00160A  0E00               	movlw	0
   726  00160C  6E2A               	movwf	(MSdelay@val+1)^0,c
   727  00160E  0E0F               	movlw	15
   728  001610  6E29               	movwf	MSdelay@val^0,c
   729  001612  EC99  F00A         	call	_MSdelay	;wreg free
   730  001616                     
   731                           ;main.c: 59:     LCD_Command(0x02);
   732  001616  0E02               	movlw	2
   733  001618  EC27  F00A         	call	_LCD_Command
   734  00161C                     
   735                           ;main.c: 61:     LCD_Command(0x28);
   736  00161C  0E28               	movlw	40
   737  00161E  EC27  F00A         	call	_LCD_Command
   738  001622                     
   739                           ;main.c: 63:  LCD_Command(0x01);
   740  001622  0E01               	movlw	1
   741  001624  EC27  F00A         	call	_LCD_Command
   742  001628                     
   743                           ;main.c: 64:     LCD_Command(0x0c);
   744  001628  0E0C               	movlw	12
   745  00162A  EC27  F00A         	call	_LCD_Command
   746  00162E                     
   747                           ;main.c: 65:  LCD_Command(0x06);
   748  00162E  0E06               	movlw	6
   749  001630  EC27  F00A         	call	_LCD_Command
   750  001634  0012               	return		;funcret
   751  001636                     __end_of_LCD_Init:
   752                           	opt callstack 0
   753                           
   754 ;; *************** function _LCD_Command *****************
   755 ;; Defined at:
   756 ;;		line 68 in file "main.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;  cmd             1    wreg     unsigned char 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  cmd             1   47[COMRAM] unsigned char 
   761 ;; Return value:  Size  Location     Type
   762 ;;                  1    wreg      void 
   763 ;; Registers used:
   764 ;;		wreg, status,2, status,0, cstack
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   771 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   773 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   774 ;;Total ram usage:        2 bytes
   775 ;; Hardware stack levels used:    1
   776 ;; Hardware stack levels required when called:    6
   777 ;; This function calls:
   778 ;;		_MSdelay
   779 ;; This function is called by:
   780 ;;		_LCD_Init
   781 ;;		_LCD_String_xy
   782 ;;		_LCD_Clear
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text5
   787  00144E                     __ptext5:
   788                           	opt callstack 0
   789  00144E                     _LCD_Command:
   790                           	opt callstack 23
   791                           
   792                           ;incstack = 0
   793                           ;LCD_Command@cmd stored from wreg
   794  00144E  6E30               	movwf	LCD_Command@cmd^0,c
   795  001450                     
   796                           ;main.c: 68: void LCD_Command(unsigned char cmd );main.c: 69: {;main.c: 70:  LATD = (LAT
      +                          D & 0x0f) |(0xF0 & cmd);
   797  001450  C030  F02F         	movff	LCD_Command@cmd,??_LCD_Command
   798  001454  0EF0               	movlw	240
   799  001456  162F               	andwf	??_LCD_Command^0,f,c
   800  001458  508C               	movf	140,w,c	;volatile
   801  00145A  0B0F               	andlw	15
   802  00145C  102F               	iorwf	??_LCD_Command^0,w,c
   803  00145E  6E8C               	movwf	140,c	;volatile
   804  001460                     
   805                           ;main.c: 71:  LATD2 = 0;
   806  001460  948C               	bcf	3980,2,c	;volatile
   807  001462                     
   808                           ;main.c: 72:  LATD3 = 1;
   809  001462  868C               	bsf	3980,3,c	;volatile
   810  001464                     
   811                           ;main.c: 73:  __nop();
   812  001464  F000               	nop	
   813  001466                     
   814                           ;main.c: 74:  LATD3 = 0;
   815  001466  968C               	bcf	3980,3,c	;volatile
   816  001468                     
   817                           ;main.c: 75:  MSdelay(1);
   818  001468  0E00               	movlw	0
   819  00146A  6E2A               	movwf	(MSdelay@val+1)^0,c
   820  00146C  0E01               	movlw	1
   821  00146E  6E29               	movwf	MSdelay@val^0,c
   822  001470  EC99  F00A         	call	_MSdelay	;wreg free
   823  001474                     
   824                           ;main.c: 76:     LATD = (LATD & 0x0f) | (cmd<<4);
   825  001474  C030  F02F         	movff	LCD_Command@cmd,??_LCD_Command
   826  001478  3A2F               	swapf	??_LCD_Command^0,f,c
   827  00147A  0EF0               	movlw	240
   828  00147C  162F               	andwf	??_LCD_Command^0,f,c
   829  00147E  508C               	movf	140,w,c	;volatile
   830  001480  0B0F               	andlw	15
   831  001482  102F               	iorwf	??_LCD_Command^0,w,c
   832  001484  6E8C               	movwf	140,c	;volatile
   833  001486                     
   834                           ;main.c: 77:  LATD3 = 1;
   835  001486  868C               	bsf	3980,3,c	;volatile
   836  001488                     
   837                           ;main.c: 78:  __nop();
   838  001488  F000               	nop	
   839  00148A                     
   840                           ;main.c: 79:  LATD3 = 0;
   841  00148A  968C               	bcf	3980,3,c	;volatile
   842                           
   843                           ;main.c: 80:  MSdelay(3);
   844  00148C  0E00               	movlw	0
   845  00148E  6E2A               	movwf	(MSdelay@val+1)^0,c
   846  001490  0E03               	movlw	3
   847  001492  6E29               	movwf	MSdelay@val^0,c
   848  001494  EC99  F00A         	call	_MSdelay	;wreg free
   849  001498  0012               	return		;funcret
   850  00149A                     __end_of_LCD_Command:
   851                           	opt callstack 0
   852                           
   853 ;; *************** function _MSdelay *****************
   854 ;; Defined at:
   855 ;;		line 131 in file "main.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;  val             2   40[COMRAM] unsigned int 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  j               2   44[COMRAM] unsigned int 
   860 ;;  i               2   42[COMRAM] unsigned int 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, status,2, status,0
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   870 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   871 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   873 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   874 ;;Total ram usage:        6 bytes
   875 ;; Hardware stack levels used:    1
   876 ;; Hardware stack levels required when called:    5
   877 ;; This function calls:
   878 ;;		Nothing
   879 ;; This function is called by:
   880 ;;		_LCD_Init
   881 ;;		_LCD_Command
   882 ;;		_LCD_Char
   883 ;;		_LCD_Clear
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text6
   888  001532                     __ptext6:
   889                           	opt callstack 0
   890  001532                     _MSdelay:
   891                           	opt callstack 22
   892  001532                     
   893                           ;main.c: 131: void MSdelay(unsigned int val);main.c: 132: {;main.c: 133:  unsigned int i
      +                          ,j;;main.c: 134:  for(i=0;i<val;i++)
   894  001532  0E00               	movlw	0
   895  001534  6E2C               	movwf	(MSdelay@i+1)^0,c
   896  001536  0E00               	movlw	0
   897  001538  6E2B               	movwf	MSdelay@i^0,c
   898  00153A  EFB2  F00A         	goto	l1114
   899  00153E                     l1102:
   900                           
   901                           ;main.c: 135:      for(j=0;j<165;j++);
   902  00153E  0E00               	movlw	0
   903  001540  6E2E               	movwf	(MSdelay@j+1)^0,c
   904  001542  0E00               	movlw	0
   905  001544  6E2D               	movwf	MSdelay@j^0,c
   906  001546                     l1108:
   907  001546  4A2D               	infsnz	MSdelay@j^0,f,c
   908  001548  2A2E               	incf	(MSdelay@j+1)^0,f,c
   909  00154A  502E               	movf	(MSdelay@j+1)^0,w,c
   910  00154C  E109               	bnz	u290
   911  00154E  0EA5               	movlw	165
   912  001550  5C2D               	subwf	MSdelay@j^0,w,c
   913  001552  A0D8               	btfss	status,0,c
   914  001554  EFAE  F00A         	goto	u291
   915  001558  EFB0  F00A         	goto	u290
   916  00155C                     u291:
   917  00155C  EFA3  F00A         	goto	l1108
   918  001560                     u290:
   919  001560  4A2B               	infsnz	MSdelay@i^0,f,c
   920  001562  2A2C               	incf	(MSdelay@i+1)^0,f,c
   921  001564                     l1114:
   922  001564  5029               	movf	MSdelay@val^0,w,c
   923  001566  5C2B               	subwf	MSdelay@i^0,w,c
   924  001568  502A               	movf	(MSdelay@val+1)^0,w,c
   925  00156A  582C               	subwfb	(MSdelay@i+1)^0,w,c
   926  00156C  A0D8               	btfss	status,0,c
   927  00156E  EFBB  F00A         	goto	u301
   928  001572  EFBD  F00A         	goto	u300
   929  001576                     u301:
   930  001576  EF9F  F00A         	goto	l1102
   931  00157A                     u300:
   932  00157A  0012               	return		;funcret
   933  00157C                     __end_of_MSdelay:
   934                           	opt callstack 0
   935                           
   936 ;; *************** function _leerADC *****************
   937 ;; Defined at:
   938 ;;		line 170 in file "main.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  valor           2   38[COMRAM] int 
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   954 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   955 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;Total ram usage:       14 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    4
   959 ;; This function calls:
   960 ;;		_LCD_Num_xy
   961 ;; This function is called by:
   962 ;;		Interrupt level 2
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	intcode
   967  000008                     __pintcode:
   968                           	opt callstack 0
   969  000008                     _leerADC:
   970                           	opt callstack 22
   971                           
   972                           ;incstack = 0
   973  000008  823D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   974  00000A  ED1C  F009         	call	int_func,f	;refresh shadow registers
   975                           
   976                           	psect	intcode_body
   977  001238                     __pintcode_body:
   978                           	opt callstack 22
   979  001238                     int_func:
   980                           	opt callstack 22
   981  001238  0006               	pop		; remove dummy address from shadow register refresh
   982  00123A  CFE9 F01D          	movff	fsr0l,??_leerADC+2
   983  00123E  CFEA F01E          	movff	fsr0h,??_leerADC+3
   984  001242  CFE1 F01F          	movff	fsr1l,??_leerADC+4
   985  001246  CFE2 F020          	movff	fsr1h,??_leerADC+5
   986  00124A  CFD9 F021          	movff	fsr2l,??_leerADC+6
   987  00124E  CFDA F022          	movff	fsr2h,??_leerADC+7
   988  001252  CFF6 F023          	movff	tblptrl,??_leerADC+8
   989  001256  CFF7 F024          	movff	tblptrh,??_leerADC+9
   990  00125A  CFF8 F025          	movff	tblptru,??_leerADC+10
   991  00125E  CFF5 F026          	movff	tablat,??_leerADC+11
   992  001262                     
   993                           ;main.c: 171:     GIE = 0;
   994  001262  9EF2               	bcf	4082,7,c	;volatile
   995  001264                     
   996                           ;main.c: 179:     if(TMR0IF){
   997  001264  A4F2               	btfss	4082,2,c	;volatile
   998  001266  EF37  F009         	goto	i2u55_41
   999  00126A  EF39  F009         	goto	i2u55_40
  1000  00126E                     i2u55_41:
  1001  00126E  EF40  F009         	goto	i2l103
  1002  001272                     i2u55_40:
  1003  001272                     
  1004                           ;main.c: 180:         ADCON0bits.GO = 1;
  1005  001272  82C2               	bsf	194,1,c	;volatile
  1006  001274                     
  1007                           ;main.c: 181:         TMR0 = 55536;
  1008  001274  0ED8               	movlw	216
  1009  001276  6ED7               	movwf	215,c	;volatile
  1010  001278  0EF0               	movlw	240
  1011  00127A  6ED6               	movwf	214,c	;volatile
  1012                           
  1013                           ;main.c: 182:     }
  1014  00127C  EF59  F009         	goto	i2l1412
  1015  001280                     i2l103:
  1016  001280  AC9E               	btfss	3998,6,c	;volatile
  1017  001282  EF45  F009         	goto	i2u56_41
  1018  001286  EF47  F009         	goto	i2u56_40
  1019  00128A                     i2u56_41:
  1020  00128A  EF59  F009         	goto	i2l1412
  1021  00128E                     i2u56_40:
  1022  00128E                     
  1023                           ;main.c: 184:         valor = (((ADRESH<<8) + ADRESL));
  1024  00128E  50C4               	movf	196,w,c	;volatile
  1025  001290  6E1C               	movwf	(??_leerADC+1)^0,c
  1026  001292  6A1B               	clrf	??_leerADC^0,c
  1027  001294  50C3               	movf	195,w,c	;volatile
  1028  001296  241B               	addwf	??_leerADC^0,w,c
  1029  001298  6E27               	movwf	leerADC@valor^0,c
  1030  00129A  0E00               	movlw	0
  1031  00129C  201C               	addwfc	(??_leerADC+1)^0,w,c
  1032  00129E  6E28               	movwf	(leerADC@valor+1)^0,c
  1033  0012A0                     
  1034                           ;main.c: 187:         LCD_Num_xy(2,9,valor);
  1035  0012A0  0E09               	movlw	9
  1036  0012A2  6E0B               	movwf	LCD_Num_xy@pos^0,c
  1037  0012A4  C027  F00C         	movff	leerADC@valor,LCD_Num_xy@msg
  1038  0012A8  C028  F00D         	movff	leerADC@valor+1,LCD_Num_xy@msg+1
  1039  0012AC  0E02               	movlw	2
  1040  0012AE  EC6C  F008         	call	_LCD_Num_xy
  1041  0012B2                     i2l1412:
  1042                           
  1043                           ;main.c: 190:     TMR0IF = 0;
  1044  0012B2  94F2               	bcf	4082,2,c	;volatile
  1045  0012B4                     
  1046                           ;main.c: 191:     ADIF = 0;
  1047  0012B4  9C9E               	bcf	3998,6,c	;volatile
  1048  0012B6                     
  1049                           ;main.c: 192:     GIE = 1;
  1050  0012B6  8EF2               	bsf	4082,7,c	;volatile
  1051  0012B8  C026  FFF5         	movff	??_leerADC+11,tablat
  1052  0012BC  C025  FFF8         	movff	??_leerADC+10,tblptru
  1053  0012C0  C024  FFF7         	movff	??_leerADC+9,tblptrh
  1054  0012C4  C023  FFF6         	movff	??_leerADC+8,tblptrl
  1055  0012C8  C022  FFDA         	movff	??_leerADC+7,fsr2h
  1056  0012CC  C021  FFD9         	movff	??_leerADC+6,fsr2l
  1057  0012D0  C020  FFE2         	movff	??_leerADC+5,fsr1h
  1058  0012D4  C01F  FFE1         	movff	??_leerADC+4,fsr1l
  1059  0012D8  C01E  FFEA         	movff	??_leerADC+3,fsr0h
  1060  0012DC  C01D  FFE9         	movff	??_leerADC+2,fsr0l
  1061  0012E0  923D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1062  0012E2  0011               	retfie		f
  1063  0012E4                     __end_of_leerADC:
  1064                           	opt callstack 0
  1065                           
  1066 ;; *************** function _LCD_Num_xy *****************
  1067 ;; Defined at:
  1068 ;;		line 138 in file "main.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;  row             1    wreg     unsigned char 
  1071 ;;  pos             1   10[COMRAM] unsigned char 
  1072 ;;  msg             2   11[COMRAM] int 
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;  row             1   22[COMRAM] unsigned char 
  1075 ;;  mensaje         5   17[COMRAM] unsigned char [5]
  1076 ;;  i               2   24[COMRAM] int 
  1077 ;;  mask            2    0        unsigned int 
  1078 ;;  aux             2    0        int 
  1079 ;;  location        1   23[COMRAM] unsigned char 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1089 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1090 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;Total ram usage:       16 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; Hardware stack levels required when called:    3
  1096 ;; This function calls:
  1097 ;;		___awdiv
  1098 ;;		___awmod
  1099 ;;		i2_LCD_Command
  1100 ;;		i2_LCD_String
  1101 ;; This function is called by:
  1102 ;;		_leerADC
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           	psect	text8
  1107  0010D8                     __ptext8:
  1108                           	opt callstack 0
  1109  0010D8                     _LCD_Num_xy:
  1110                           	opt callstack 22
  1111                           
  1112                           ;incstack = 0
  1113                           ;LCD_Num_xy@row stored from wreg
  1114  0010D8  6E17               	movwf	LCD_Num_xy@row^0,c
  1115  0010DA                     
  1116                           ;main.c: 141:     char mensaje[5] = {0,0,0,0,'\0'};
  1117  0010DA  EE20  F038         	lfsr	2,LCD_Num_xy@F2469
  1118  0010DE  EE10  F012         	lfsr	1,LCD_Num_xy@mensaje
  1119  0010E2  0E04               	movlw	4
  1120  0010E4                     i2u52_41:
  1121  0010E4  CFDB FFE3          	movff	plusw2,plusw1
  1122  0010E8  06E8               	decf	wreg,f,c
  1123  0010EA  E2FC               	bc	i2u52_41
  1124  0010EC                     
  1125                           ;main.c: 145:     if(row<=1)
  1126  0010EC  0E02               	movlw	2
  1127  0010EE  6017               	cpfslt	LCD_Num_xy@row^0,c
  1128  0010F0  EF7C  F008         	goto	i2u53_41
  1129  0010F4  EF7E  F008         	goto	i2u53_40
  1130  0010F8                     i2u53_41:
  1131  0010F8  EF87  F008         	goto	i2l1350
  1132  0010FC                     i2u53_40:
  1133  0010FC                     
  1134                           ;main.c: 146:     {;main.c: 147:         location=(0x80) | ((pos) & 0x0f);
  1135  0010FC  500B               	movf	LCD_Num_xy@pos^0,w,c
  1136  0010FE  0B0F               	andlw	15
  1137  001100  0980               	iorlw	128
  1138  001102  6E18               	movwf	LCD_Num_xy@location^0,c
  1139  001104                     
  1140                           ;main.c: 148:         LCD_Command(location);
  1141  001104  5018               	movf	LCD_Num_xy@location^0,w,c
  1142  001106  EC73  F00A         	call	i2_LCD_Command
  1143                           
  1144                           ;main.c: 149:     }
  1145  00110A  EF8E  F008         	goto	i2l1354
  1146  00110E                     i2l1350:
  1147                           
  1148                           ;main.c: 151:     {;main.c: 152:         location=(0xC0) | ((pos) & 0x0f);
  1149  00110E  500B               	movf	LCD_Num_xy@pos^0,w,c
  1150  001110  0B0F               	andlw	15
  1151  001112  09C0               	iorlw	192
  1152  001114  6E18               	movwf	LCD_Num_xy@location^0,c
  1153  001116                     
  1154                           ;main.c: 153:         LCD_Command(location);
  1155  001116  5018               	movf	LCD_Num_xy@location^0,w,c
  1156  001118  EC73  F00A         	call	i2_LCD_Command
  1157  00111C                     i2l1354:
  1158                           
  1159                           ;main.c: 159:     for(i=3 ;i >= 0; i--){
  1160  00111C  0E00               	movlw	0
  1161  00111E  6E1A               	movwf	(LCD_Num_xy@i+1)^0,c
  1162  001120  0E03               	movlw	3
  1163  001122  6E19               	movwf	LCD_Num_xy@i^0,c
  1164  001124                     i2l1360:
  1165                           
  1166                           ;main.c: 160:         mensaje[i] = (msg%10) + 48;
  1167  001124  0E12               	movlw	low LCD_Num_xy@mensaje
  1168  001126  2419               	addwf	LCD_Num_xy@i^0,w,c
  1169  001128  6ED9               	movwf	fsr2l,c
  1170  00112A  0E00               	movlw	high LCD_Num_xy@mensaje
  1171  00112C  201A               	addwfc	(LCD_Num_xy@i+1)^0,w,c
  1172  00112E  6EDA               	movwf	fsr2h,c
  1173  001130  C00C  F001         	movff	LCD_Num_xy@msg,___awmod@dividend
  1174  001134  C00D  F002         	movff	LCD_Num_xy@msg+1,___awmod@dividend+1
  1175  001138  0E00               	movlw	0
  1176  00113A  6E04               	movwf	(___awmod@divisor+1)^0,c
  1177  00113C  0E0A               	movlw	10
  1178  00113E  6E03               	movwf	___awmod@divisor^0,c
  1179  001140  ECC4  F008         	call	___awmod	;wreg free
  1180  001144  5001               	movf	?___awmod^0,w,c
  1181  001146  0F30               	addlw	48
  1182  001148  6EDF               	movwf	indf2,c
  1183  00114A                     
  1184                           ;main.c: 161:         msg = msg/10;
  1185  00114A  C00C  F001         	movff	LCD_Num_xy@msg,___awdiv@dividend
  1186  00114E  C00D  F002         	movff	LCD_Num_xy@msg+1,___awdiv@dividend+1
  1187  001152  0E00               	movlw	0
  1188  001154  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1189  001156  0E0A               	movlw	10
  1190  001158  6E03               	movwf	___awdiv@divisor^0,c
  1191  00115A  EC0A  F008         	call	___awdiv	;wreg free
  1192  00115E  C001  F00C         	movff	?___awdiv,LCD_Num_xy@msg
  1193  001162  C002  F00D         	movff	?___awdiv+1,LCD_Num_xy@msg+1
  1194  001166                     
  1195                           ;main.c: 162:     }
  1196  001166  0619               	decf	LCD_Num_xy@i^0,f,c
  1197  001168  A0D8               	btfss	status,0,c
  1198  00116A  061A               	decf	(LCD_Num_xy@i+1)^0,f,c
  1199  00116C  BE1A               	btfsc	(LCD_Num_xy@i+1)^0,7,c
  1200  00116E  EFBD  F008         	goto	i2u54_40
  1201  001172  EFBB  F008         	goto	i2u54_41
  1202  001176                     i2u54_41:
  1203  001176  EF92  F008         	goto	i2l1360
  1204  00117A                     i2u54_40:
  1205  00117A                     
  1206                           ;main.c: 167:     LCD_String(mensaje);
  1207  00117A  0E12               	movlw	low LCD_Num_xy@mensaje
  1208  00117C  6E09               	movwf	i2LCD_String@msg^0,c
  1209  00117E  0E00               	movlw	high LCD_Num_xy@mensaje
  1210  001180  6E0A               	movwf	(i2LCD_String@msg+1)^0,c
  1211  001182  ECA3  F009         	call	i2_LCD_String	;wreg free
  1212  001186  0012               	return		;funcret
  1213  001188                     __end_of_LCD_Num_xy:
  1214                           	opt callstack 0
  1215                           
  1216 ;; *************** function i2_LCD_String *****************
  1217 ;; Defined at:
  1218 ;;		line 98 in file "main.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;  msg             2    8[COMRAM] PTR const unsigned char 
  1221 ;;		 -> LCD_Num_xy@mensaje(5), STR_2(6), STR_1(12), 
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;		None
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      void 
  1226 ;; Registers used:
  1227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1233 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1236 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1237 ;;Total ram usage:        2 bytes
  1238 ;; Hardware stack levels used:    1
  1239 ;; Hardware stack levels required when called:    2
  1240 ;; This function calls:
  1241 ;;		i2_LCD_Char
  1242 ;; This function is called by:
  1243 ;;		_LCD_Num_xy
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text9
  1248  001346                     __ptext9:
  1249                           	opt callstack 0
  1250  001346                     i2_LCD_String:
  1251                           	opt callstack 22
  1252  001346                     
  1253                           ;main.c: 98: void LCD_String(const char *msg);main.c: 99: {;main.c: 100:  while((*msg)!=
      +                          0)
  1254  001346  EFBA  F009         	goto	i2l1306
  1255  00134A                     i2l1302:
  1256                           
  1257                           ;main.c: 101:  {;main.c: 102:    LCD_Char(*msg);
  1258  00134A  C009  FFF6         	movff	i2LCD_String@msg,tblptrl
  1259  00134E  C00A  FFF7         	movff	i2LCD_String@msg+1,tblptrh
  1260  001352  0E00               	movlw	low (__smallconst shr (0+16))
  1261  001354  6EF8               	movwf	tblptru,c
  1262  001356  0E0F               	movlw	(high __ramtop+-1)
  1263  001358  64F7               	cpfsgt	tblptrh,c
  1264  00135A  D003               	bra	i2u48_47
  1265  00135C  0008               	tblrd		*
  1266  00135E  50F5               	movf	tablat,w,c
  1267  001360  D005               	bra	i2u48_40
  1268  001362                     i2u48_47:
  1269  001362  CFF6 FFE9          	movff	tblptrl,fsr0l
  1270  001366  CFF7 FFEA          	movff	tblptrh,fsr0h
  1271  00136A  50EF               	movf	indf0,w,c
  1272  00136C                     i2u48_40:
  1273  00136C  EC4D  F00A         	call	i2_LCD_Char
  1274  001370                     
  1275                           ;main.c: 103:    msg++;
  1276  001370  4A09               	infsnz	i2LCD_String@msg^0,f,c
  1277  001372  2A0A               	incf	(i2LCD_String@msg+1)^0,f,c
  1278  001374                     i2l1306:
  1279                           
  1280                           ;main.c: 100:  while((*msg)!=0)
  1281  001374  C009  FFF6         	movff	i2LCD_String@msg,tblptrl
  1282  001378  C00A  FFF7         	movff	i2LCD_String@msg+1,tblptrh
  1283  00137C  0E00               	movlw	low (__smallconst shr (0+16))
  1284  00137E  6EF8               	movwf	tblptru,c
  1285  001380  0E0F               	movlw	(high __ramtop+-1)
  1286  001382  64F7               	cpfsgt	tblptrh,c
  1287  001384  D003               	bra	i2u49_47
  1288  001386  0008               	tblrd		*
  1289  001388  50F5               	movf	tablat,w,c
  1290  00138A  D005               	bra	i2u49_40
  1291  00138C                     i2u49_47:
  1292  00138C  CFF6 FFE9          	movff	tblptrl,fsr0l
  1293  001390  CFF7 FFEA          	movff	tblptrh,fsr0h
  1294  001394  50EF               	movf	indf0,w,c
  1295  001396                     i2u49_40:
  1296  001396  0900               	iorlw	0
  1297  001398  A4D8               	btfss	status,2,c
  1298  00139A  EFD1  F009         	goto	i2u50_41
  1299  00139E  EFD3  F009         	goto	i2u50_40
  1300  0013A2                     i2u50_41:
  1301  0013A2  EFA5  F009         	goto	i2l1302
  1302  0013A6                     i2u50_40:
  1303  0013A6  0012               	return		;funcret
  1304  0013A8                     __end_ofi2_LCD_String:
  1305                           	opt callstack 0
  1306                           
  1307 ;; *************** function i2_LCD_Char *****************
  1308 ;; Defined at:
  1309 ;;		line 84 in file "main.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  dat             1    wreg     unsigned char 
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;  dat             1    7[COMRAM] unsigned char 
  1314 ;; Return value:  Size  Location     Type
  1315 ;;                  1    wreg      void 
  1316 ;; Registers used:
  1317 ;;		wreg, status,2, status,0, cstack
  1318 ;; Tracked objects:
  1319 ;;		On entry : 0/0
  1320 ;;		On exit  : 0/0
  1321 ;;		Unchanged: 0/0
  1322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1327 ;;Total ram usage:        2 bytes
  1328 ;; Hardware stack levels used:    1
  1329 ;; Hardware stack levels required when called:    1
  1330 ;; This function calls:
  1331 ;;		i2_MSdelay
  1332 ;; This function is called by:
  1333 ;;		i2_LCD_String
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           	psect	text10
  1338  00149A                     __ptext10:
  1339                           	opt callstack 0
  1340  00149A                     i2_LCD_Char:
  1341                           	opt callstack 22
  1342                           
  1343                           ;incstack = 0
  1344                           ;i2LCD_Char@dat stored from wreg
  1345  00149A  6E08               	movwf	i2LCD_Char@dat^0,c
  1346  00149C                     
  1347                           ;main.c: 84: void LCD_Char(unsigned char dat);main.c: 85: {;main.c: 86:  LATD = (LATD & 
      +                          0x0f) | (0xF0 & dat);
  1348  00149C  C008  F007         	movff	i2LCD_Char@dat,??i2_LCD_Char
  1349  0014A0  0EF0               	movlw	240
  1350  0014A2  1607               	andwf	??i2_LCD_Char^0,f,c
  1351  0014A4  508C               	movf	140,w,c	;volatile
  1352  0014A6  0B0F               	andlw	15
  1353  0014A8  1007               	iorwf	??i2_LCD_Char^0,w,c
  1354  0014AA  6E8C               	movwf	140,c	;volatile
  1355  0014AC                     
  1356                           ;main.c: 87:  LATD2 = 1;
  1357  0014AC  848C               	bsf	3980,2,c	;volatile
  1358  0014AE                     
  1359                           ;main.c: 88:  LATD3 = 1;
  1360  0014AE  868C               	bsf	3980,3,c	;volatile
  1361  0014B0                     
  1362                           ;main.c: 89:  __nop();
  1363  0014B0  F000               	nop	
  1364  0014B2                     
  1365                           ;main.c: 90:  LATD3 = 0;
  1366  0014B2  968C               	bcf	3980,3,c	;volatile
  1367  0014B4                     
  1368                           ;main.c: 91:  MSdelay(1);
  1369  0014B4  0E00               	movlw	0
  1370  0014B6  6E02               	movwf	(i2MSdelay@val+1)^0,c
  1371  0014B8  0E01               	movlw	1
  1372  0014BA  6E01               	movwf	i2MSdelay@val^0,c
  1373  0014BC  ECBE  F00A         	call	i2_MSdelay	;wreg free
  1374  0014C0                     
  1375                           ;main.c: 92:     LATD = (LATD & 0x0f) | (dat<<4);
  1376  0014C0  C008  F007         	movff	i2LCD_Char@dat,??i2_LCD_Char
  1377  0014C4  3A07               	swapf	??i2_LCD_Char^0,f,c
  1378  0014C6  0EF0               	movlw	240
  1379  0014C8  1607               	andwf	??i2_LCD_Char^0,f,c
  1380  0014CA  508C               	movf	140,w,c	;volatile
  1381  0014CC  0B0F               	andlw	15
  1382  0014CE  1007               	iorwf	??i2_LCD_Char^0,w,c
  1383  0014D0  6E8C               	movwf	140,c	;volatile
  1384  0014D2                     
  1385                           ;main.c: 93:  LATD3 = 1;
  1386  0014D2  868C               	bsf	3980,3,c	;volatile
  1387  0014D4                     
  1388                           ;main.c: 94:  __nop();
  1389  0014D4  F000               	nop	
  1390  0014D6                     
  1391                           ;main.c: 95:  LATD3 = 0;
  1392  0014D6  968C               	bcf	3980,3,c	;volatile
  1393                           
  1394                           ;main.c: 96:  MSdelay(3);
  1395  0014D8  0E00               	movlw	0
  1396  0014DA  6E02               	movwf	(i2MSdelay@val+1)^0,c
  1397  0014DC  0E03               	movlw	3
  1398  0014DE  6E01               	movwf	i2MSdelay@val^0,c
  1399  0014E0  ECBE  F00A         	call	i2_MSdelay	;wreg free
  1400  0014E4  0012               	return		;funcret
  1401  0014E6                     __end_ofi2_LCD_Char:
  1402                           	opt callstack 0
  1403                           
  1404 ;; *************** function i2_LCD_Command *****************
  1405 ;; Defined at:
  1406 ;;		line 68 in file "main.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  cmd             1    wreg     unsigned char 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  cmd             1    7[COMRAM] unsigned char 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, status,2, status,0, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1421 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1424 ;;Total ram usage:        2 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    1
  1427 ;; This function calls:
  1428 ;;		i2_MSdelay
  1429 ;; This function is called by:
  1430 ;;		_LCD_Num_xy
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text11
  1435  0014E6                     __ptext11:
  1436                           	opt callstack 0
  1437  0014E6                     i2_LCD_Command:
  1438                           	opt callstack 23
  1439                           
  1440                           ;incstack = 0
  1441                           ;i2LCD_Command@cmd stored from wreg
  1442  0014E6  6E08               	movwf	i2LCD_Command@cmd^0,c
  1443  0014E8                     
  1444                           ;main.c: 68: void LCD_Command(unsigned char cmd );main.c: 69: {;main.c: 70:  LATD = (LAT
      +                          D & 0x0f) |(0xF0 & cmd);
  1445  0014E8  C008  F007         	movff	i2LCD_Command@cmd,??i2_LCD_Command
  1446  0014EC  0EF0               	movlw	240
  1447  0014EE  1607               	andwf	??i2_LCD_Command^0,f,c
  1448  0014F0  508C               	movf	140,w,c	;volatile
  1449  0014F2  0B0F               	andlw	15
  1450  0014F4  1007               	iorwf	??i2_LCD_Command^0,w,c
  1451  0014F6  6E8C               	movwf	140,c	;volatile
  1452  0014F8                     
  1453                           ;main.c: 71:  LATD2 = 0;
  1454  0014F8  948C               	bcf	3980,2,c	;volatile
  1455  0014FA                     
  1456                           ;main.c: 72:  LATD3 = 1;
  1457  0014FA  868C               	bsf	3980,3,c	;volatile
  1458  0014FC                     
  1459                           ;main.c: 73:  __nop();
  1460  0014FC  F000               	nop	
  1461  0014FE                     
  1462                           ;main.c: 74:  LATD3 = 0;
  1463  0014FE  968C               	bcf	3980,3,c	;volatile
  1464  001500                     
  1465                           ;main.c: 75:  MSdelay(1);
  1466  001500  0E00               	movlw	0
  1467  001502  6E02               	movwf	(i2MSdelay@val+1)^0,c
  1468  001504  0E01               	movlw	1
  1469  001506  6E01               	movwf	i2MSdelay@val^0,c
  1470  001508  ECBE  F00A         	call	i2_MSdelay	;wreg free
  1471  00150C                     
  1472                           ;main.c: 76:     LATD = (LATD & 0x0f) | (cmd<<4);
  1473  00150C  C008  F007         	movff	i2LCD_Command@cmd,??i2_LCD_Command
  1474  001510  3A07               	swapf	??i2_LCD_Command^0,f,c
  1475  001512  0EF0               	movlw	240
  1476  001514  1607               	andwf	??i2_LCD_Command^0,f,c
  1477  001516  508C               	movf	140,w,c	;volatile
  1478  001518  0B0F               	andlw	15
  1479  00151A  1007               	iorwf	??i2_LCD_Command^0,w,c
  1480  00151C  6E8C               	movwf	140,c	;volatile
  1481  00151E                     
  1482                           ;main.c: 77:  LATD3 = 1;
  1483  00151E  868C               	bsf	3980,3,c	;volatile
  1484  001520                     
  1485                           ;main.c: 78:  __nop();
  1486  001520  F000               	nop	
  1487  001522                     
  1488                           ;main.c: 79:  LATD3 = 0;
  1489  001522  968C               	bcf	3980,3,c	;volatile
  1490                           
  1491                           ;main.c: 80:  MSdelay(3);
  1492  001524  0E00               	movlw	0
  1493  001526  6E02               	movwf	(i2MSdelay@val+1)^0,c
  1494  001528  0E03               	movlw	3
  1495  00152A  6E01               	movwf	i2MSdelay@val^0,c
  1496  00152C  ECBE  F00A         	call	i2_MSdelay	;wreg free
  1497  001530  0012               	return		;funcret
  1498  001532                     __end_ofi2_LCD_Command:
  1499                           	opt callstack 0
  1500                           
  1501 ;; *************** function i2_MSdelay *****************
  1502 ;; Defined at:
  1503 ;;		line 131 in file "main.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  val             2    0[COMRAM] unsigned int 
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  MSdelay         2    4[COMRAM] unsigned int 
  1508 ;;  MSdelay         2    2[COMRAM] unsigned int 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1518 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1519 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;Total ram usage:        6 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; This function calls:
  1525 ;;		Nothing
  1526 ;; This function is called by:
  1527 ;;		i2_LCD_Command
  1528 ;;		i2_LCD_Char
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text12
  1533  00157C                     __ptext12:
  1534                           	opt callstack 0
  1535  00157C                     i2_MSdelay:
  1536                           	opt callstack 22
  1537  00157C                     
  1538                           ;main.c: 131: void MSdelay(unsigned int val);main.c: 132: {;main.c: 133:  unsigned int i
      +                          ,j;;main.c: 134:  for(i=0;i<val;i++)
  1539  00157C  0E00               	movlw	0
  1540  00157E  6E04               	movwf	(i2MSdelay@i+1)^0,c
  1541  001580  0E00               	movlw	0
  1542  001582  6E03               	movwf	i2MSdelay@i^0,c
  1543  001584  EFD7  F00A         	goto	i2l1130
  1544  001588                     i2l1118:
  1545                           
  1546                           ;main.c: 135:      for(j=0;j<165;j++);
  1547  001588  0E00               	movlw	0
  1548  00158A  6E06               	movwf	(i2MSdelay@j+1)^0,c
  1549  00158C  0E00               	movlw	0
  1550  00158E  6E05               	movwf	i2MSdelay@j^0,c
  1551  001590                     i2l1124:
  1552  001590  4A05               	infsnz	i2MSdelay@j^0,f,c
  1553  001592  2A06               	incf	(i2MSdelay@j+1)^0,f,c
  1554  001594  5006               	movf	(i2MSdelay@j+1)^0,w,c
  1555  001596  E109               	bnz	i2u31_40
  1556  001598  0EA5               	movlw	165
  1557  00159A  5C05               	subwf	i2MSdelay@j^0,w,c
  1558  00159C  A0D8               	btfss	status,0,c
  1559  00159E  EFD3  F00A         	goto	i2u31_41
  1560  0015A2  EFD5  F00A         	goto	i2u31_40
  1561  0015A6                     i2u31_41:
  1562  0015A6  EFC8  F00A         	goto	i2l1124
  1563  0015AA                     i2u31_40:
  1564  0015AA  4A03               	infsnz	i2MSdelay@i^0,f,c
  1565  0015AC  2A04               	incf	(i2MSdelay@i+1)^0,f,c
  1566  0015AE                     i2l1130:
  1567  0015AE  5001               	movf	i2MSdelay@val^0,w,c
  1568  0015B0  5C03               	subwf	i2MSdelay@i^0,w,c
  1569  0015B2  5002               	movf	(i2MSdelay@val+1)^0,w,c
  1570  0015B4  5804               	subwfb	(i2MSdelay@i+1)^0,w,c
  1571  0015B6  A0D8               	btfss	status,0,c
  1572  0015B8  EFE0  F00A         	goto	i2u32_41
  1573  0015BC  EFE2  F00A         	goto	i2u32_40
  1574  0015C0                     i2u32_41:
  1575  0015C0  EFC4  F00A         	goto	i2l1118
  1576  0015C4                     i2u32_40:
  1577  0015C4  0012               	return		;funcret
  1578  0015C6                     __end_ofi2_MSdelay:
  1579                           	opt callstack 0
  1580                           
  1581 ;; *************** function ___awmod *****************
  1582 ;; Defined at:
  1583 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;  dividend        2    0[COMRAM] int 
  1586 ;;  divisor         2    2[COMRAM] int 
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;  sign            1    5[COMRAM] unsigned char 
  1589 ;;  counter         1    4[COMRAM] unsigned char 
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  2    0[COMRAM] int 
  1592 ;; Registers used:
  1593 ;;		wreg, status,2, status,0
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;Total ram usage:        6 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_LCD_Num_xy
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text13
  1613  001188                     __ptext13:
  1614                           	opt callstack 0
  1615  001188                     ___awmod:
  1616                           	opt callstack 24
  1617  001188  0E00               	movlw	0
  1618  00118A  6E06               	movwf	___awmod@sign^0,c
  1619  00118C  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1620  00118E  EFCD  F008         	goto	i2u42_40
  1621  001192  EFCB  F008         	goto	i2u42_41
  1622  001196                     i2u42_41:
  1623  001196  EFD3  F008         	goto	i2l1252
  1624  00119A                     i2u42_40:
  1625  00119A  6C01               	negf	___awmod@dividend^0,c
  1626  00119C  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1627  00119E  B0D8               	btfsc	status,0,c
  1628  0011A0  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1629  0011A2  0E01               	movlw	1
  1630  0011A4  6E06               	movwf	___awmod@sign^0,c
  1631  0011A6                     i2l1252:
  1632  0011A6  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1633  0011A8  EFDA  F008         	goto	i2u43_40
  1634  0011AC  EFD8  F008         	goto	i2u43_41
  1635  0011B0                     i2u43_41:
  1636  0011B0  EFDE  F008         	goto	i2l1256
  1637  0011B4                     i2u43_40:
  1638  0011B4  6C03               	negf	___awmod@divisor^0,c
  1639  0011B6  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1640  0011B8  B0D8               	btfsc	status,0,c
  1641  0011BA  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1642  0011BC                     i2l1256:
  1643  0011BC  5003               	movf	___awmod@divisor^0,w,c
  1644  0011BE  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1645  0011C0  B4D8               	btfsc	status,2,c
  1646  0011C2  EFE5  F008         	goto	i2u44_41
  1647  0011C6  EFE7  F008         	goto	i2u44_40
  1648  0011CA                     i2u44_41:
  1649  0011CA  EF0B  F009         	goto	i2l1272
  1650  0011CE                     i2u44_40:
  1651  0011CE  0E01               	movlw	1
  1652  0011D0  6E05               	movwf	___awmod@counter^0,c
  1653  0011D2  EFEF  F008         	goto	i2l1262
  1654  0011D6                     i2l1260:
  1655  0011D6  90D8               	bcf	status,0,c
  1656  0011D8  3603               	rlcf	___awmod@divisor^0,f,c
  1657  0011DA  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1658  0011DC  2A05               	incf	___awmod@counter^0,f,c
  1659  0011DE                     i2l1262:
  1660  0011DE  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1661  0011E0  EFF4  F008         	goto	i2u45_41
  1662  0011E4  EFF6  F008         	goto	i2u45_40
  1663  0011E8                     i2u45_41:
  1664  0011E8  EFEB  F008         	goto	i2l1260
  1665  0011EC                     i2u45_40:
  1666  0011EC                     i2l1264:
  1667  0011EC  5003               	movf	___awmod@divisor^0,w,c
  1668  0011EE  5C01               	subwf	___awmod@dividend^0,w,c
  1669  0011F0  5004               	movf	(___awmod@divisor+1)^0,w,c
  1670  0011F2  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1671  0011F4  A0D8               	btfss	status,0,c
  1672  0011F6  EFFF  F008         	goto	i2u46_41
  1673  0011FA  EF01  F009         	goto	i2u46_40
  1674  0011FE                     i2u46_41:
  1675  0011FE  EF05  F009         	goto	i2l1268
  1676  001202                     i2u46_40:
  1677  001202  5003               	movf	___awmod@divisor^0,w,c
  1678  001204  5E01               	subwf	___awmod@dividend^0,f,c
  1679  001206  5004               	movf	(___awmod@divisor+1)^0,w,c
  1680  001208  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1681  00120A                     i2l1268:
  1682  00120A  90D8               	bcf	status,0,c
  1683  00120C  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1684  00120E  3203               	rrcf	___awmod@divisor^0,f,c
  1685  001210  2E05               	decfsz	___awmod@counter^0,f,c
  1686  001212  EFF6  F008         	goto	i2l1264
  1687  001216                     i2l1272:
  1688  001216  5006               	movf	___awmod@sign^0,w,c
  1689  001218  B4D8               	btfsc	status,2,c
  1690  00121A  EF11  F009         	goto	i2u47_41
  1691  00121E  EF13  F009         	goto	i2u47_40
  1692  001222                     i2u47_41:
  1693  001222  EF17  F009         	goto	i2l1276
  1694  001226                     i2u47_40:
  1695  001226  6C01               	negf	___awmod@dividend^0,c
  1696  001228  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1697  00122A  B0D8               	btfsc	status,0,c
  1698  00122C  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1699  00122E                     i2l1276:
  1700  00122E  C001  F001         	movff	___awmod@dividend,?___awmod
  1701  001232  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1702  001236  0012               	return		;funcret
  1703  001238                     __end_of___awmod:
  1704                           	opt callstack 0
  1705                           
  1706 ;; *************** function ___awdiv *****************
  1707 ;; Defined at:
  1708 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;  dividend        2    0[COMRAM] int 
  1711 ;;  divisor         2    2[COMRAM] int 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  quotient        2    6[COMRAM] int 
  1714 ;;  sign            1    5[COMRAM] unsigned char 
  1715 ;;  counter         1    4[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  2    0[COMRAM] int 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1725 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;Total ram usage:        8 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; This function calls:
  1732 ;;		Nothing
  1733 ;; This function is called by:
  1734 ;;		_LCD_Num_xy
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text14
  1739  001014                     __ptext14:
  1740                           	opt callstack 0
  1741  001014                     ___awdiv:
  1742                           	opt callstack 24
  1743  001014  0E00               	movlw	0
  1744  001016  6E06               	movwf	___awdiv@sign^0,c
  1745  001018  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1746  00101A  EF13  F008         	goto	i2u36_40
  1747  00101E  EF11  F008         	goto	i2u36_41
  1748  001022                     i2u36_41:
  1749  001022  EF19  F008         	goto	i2l1208
  1750  001026                     i2u36_40:
  1751  001026  6C03               	negf	___awdiv@divisor^0,c
  1752  001028  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1753  00102A  B0D8               	btfsc	status,0,c
  1754  00102C  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1755  00102E  0E01               	movlw	1
  1756  001030  6E06               	movwf	___awdiv@sign^0,c
  1757  001032                     i2l1208:
  1758  001032  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1759  001034  EF20  F008         	goto	i2u37_40
  1760  001038  EF1E  F008         	goto	i2u37_41
  1761  00103C                     i2u37_41:
  1762  00103C  EF26  F008         	goto	i2l1214
  1763  001040                     i2u37_40:
  1764  001040  6C01               	negf	___awdiv@dividend^0,c
  1765  001042  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1766  001044  B0D8               	btfsc	status,0,c
  1767  001046  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1768  001048  0E01               	movlw	1
  1769  00104A  1A06               	xorwf	___awdiv@sign^0,f,c
  1770  00104C                     i2l1214:
  1771  00104C  0E00               	movlw	0
  1772  00104E  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1773  001050  0E00               	movlw	0
  1774  001052  6E07               	movwf	___awdiv@quotient^0,c
  1775  001054  5003               	movf	___awdiv@divisor^0,w,c
  1776  001056  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1777  001058  B4D8               	btfsc	status,2,c
  1778  00105A  EF31  F008         	goto	i2u38_41
  1779  00105E  EF33  F008         	goto	i2u38_40
  1780  001062                     i2u38_41:
  1781  001062  EF5B  F008         	goto	i2l1236
  1782  001066                     i2u38_40:
  1783  001066  0E01               	movlw	1
  1784  001068  6E05               	movwf	___awdiv@counter^0,c
  1785  00106A  EF3B  F008         	goto	i2l1222
  1786  00106E                     i2l1220:
  1787  00106E  90D8               	bcf	status,0,c
  1788  001070  3603               	rlcf	___awdiv@divisor^0,f,c
  1789  001072  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1790  001074  2A05               	incf	___awdiv@counter^0,f,c
  1791  001076                     i2l1222:
  1792  001076  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1793  001078  EF40  F008         	goto	i2u39_41
  1794  00107C  EF42  F008         	goto	i2u39_40
  1795  001080                     i2u39_41:
  1796  001080  EF37  F008         	goto	i2l1220
  1797  001084                     i2u39_40:
  1798  001084                     i2l1224:
  1799  001084  90D8               	bcf	status,0,c
  1800  001086  3607               	rlcf	___awdiv@quotient^0,f,c
  1801  001088  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1802  00108A  5003               	movf	___awdiv@divisor^0,w,c
  1803  00108C  5C01               	subwf	___awdiv@dividend^0,w,c
  1804  00108E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1805  001090  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1806  001092  A0D8               	btfss	status,0,c
  1807  001094  EF4E  F008         	goto	i2u40_41
  1808  001098  EF50  F008         	goto	i2u40_40
  1809  00109C                     i2u40_41:
  1810  00109C  EF55  F008         	goto	i2l1232
  1811  0010A0                     i2u40_40:
  1812  0010A0  5003               	movf	___awdiv@divisor^0,w,c
  1813  0010A2  5E01               	subwf	___awdiv@dividend^0,f,c
  1814  0010A4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1815  0010A6  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1816  0010A8  8007               	bsf	___awdiv@quotient^0,0,c
  1817  0010AA                     i2l1232:
  1818  0010AA  90D8               	bcf	status,0,c
  1819  0010AC  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1820  0010AE  3203               	rrcf	___awdiv@divisor^0,f,c
  1821  0010B0  2E05               	decfsz	___awdiv@counter^0,f,c
  1822  0010B2  EF42  F008         	goto	i2l1224
  1823  0010B6                     i2l1236:
  1824  0010B6  5006               	movf	___awdiv@sign^0,w,c
  1825  0010B8  B4D8               	btfsc	status,2,c
  1826  0010BA  EF61  F008         	goto	i2u41_41
  1827  0010BE  EF63  F008         	goto	i2u41_40
  1828  0010C2                     i2u41_41:
  1829  0010C2  EF67  F008         	goto	i2l1240
  1830  0010C6                     i2u41_40:
  1831  0010C6  6C07               	negf	___awdiv@quotient^0,c
  1832  0010C8  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1833  0010CA  B0D8               	btfsc	status,0,c
  1834  0010CC  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1835  0010CE                     i2l1240:
  1836  0010CE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1837  0010D2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1838  0010D6  0012               	return		;funcret
  1839  0010D8                     __end_of___awdiv:
  1840                           	opt callstack 0
  1841                           
  1842                           	psect	rparam
  1843  0000                     
  1844                           	psect	temp
  1845  00003D                     btemp:
  1846                           	opt callstack 0
  1847  00003D                     	ds	1
  1848  0000                     int$flags	set	btemp
  1849  0000                     wtemp8	set	btemp+1
  1850  0000                     ttemp5	set	btemp+1
  1851  0000                     ttemp6	set	btemp+4
  1852  0000                     ttemp7	set	btemp+8
  1853                           tosu	equ	0xFFF
  1854                           tosh	equ	0xFFE
  1855                           tosl	equ	0xFFD
  1856                           stkptr	equ	0xFFC
  1857                           pclatu	equ	0xFFB
  1858                           pclath	equ	0xFFA
  1859                           pcl	equ	0xFF9
  1860                           tblptru	equ	0xFF8
  1861                           tblptrh	equ	0xFF7
  1862                           tblptrl	equ	0xFF6
  1863                           tablat	equ	0xFF5
  1864                           prodh	equ	0xFF4
  1865                           prodl	equ	0xFF3
  1866                           indf0	equ	0xFEF
  1867                           postinc0	equ	0xFEE
  1868                           postdec0	equ	0xFED
  1869                           preinc0	equ	0xFEC
  1870                           plusw0	equ	0xFEB
  1871                           fsr0h	equ	0xFEA
  1872                           fsr0l	equ	0xFE9
  1873                           wreg	equ	0xFE8
  1874                           indf1	equ	0xFE7
  1875                           postinc1	equ	0xFE6
  1876                           postdec1	equ	0xFE5
  1877                           preinc1	equ	0xFE4
  1878                           plusw1	equ	0xFE3
  1879                           fsr1h	equ	0xFE2
  1880                           fsr1l	equ	0xFE1
  1881                           bsr	equ	0xFE0
  1882                           indf2	equ	0xFDF
  1883                           postinc2	equ	0xFDE
  1884                           postdec2	equ	0xFDD
  1885                           preinc2	equ	0xFDC
  1886                           plusw2	equ	0xFDB
  1887                           fsr2h	equ	0xFDA
  1888                           fsr2l	equ	0xFD9
  1889                           status	equ	0xFD8


Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     55      60
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    LCD_String_xy@msg	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[6]), STR_1(CODE[12]), 

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 12
		 -> LCD_Num_xy@mensaje(COMRAM[5]), STR_2(CODE[6]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_LCD_String_xy
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _leerADC in COMRAM

    _leerADC->_LCD_Num_xy
    _LCD_Num_xy->i2_LCD_String
    i2_LCD_String->i2_LCD_Char
    i2_LCD_Char->i2_MSdelay
    i2_LCD_Command->i2_MSdelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _leerADC in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _leerADC in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _leerADC in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _leerADC in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _leerADC in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _leerADC in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _leerADC in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _leerADC in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _leerADC in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _leerADC in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _leerADC in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _leerADC in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _leerADC in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _leerADC in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _leerADC in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _leerADC in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2934
                           _LCD_Init
                      _LCD_String_xy
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        5     2      3    1794
                                             50 COMRAM     5     2      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2     763
                                             48 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             2     2      0     592
                                             46 COMRAM     2     2      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0    1140
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0     592
                                             46 COMRAM     2     2      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (4) _MSdelay                                              6     4      2     548
                                             40 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _leerADC                                             14    14      0    1928
                                             26 COMRAM    14    14      0
                         _LCD_Num_xy
 ---------------------------------------------------------------------------------
 (6) _LCD_Num_xy                                          16    13      3    1904
                                             10 COMRAM    16    13      3
                            ___awdiv
                            ___awmod
                      i2_LCD_Command
                       i2_LCD_String
 ---------------------------------------------------------------------------------
 (7) i2_LCD_String                                         2     0      2     311
                                              8 COMRAM     2     0      2
                         i2_LCD_Char
 ---------------------------------------------------------------------------------
 (8) i2_LCD_Char                                           2     2      0     240
                                              6 COMRAM     2     2      0
                          i2_MSdelay
 ---------------------------------------------------------------------------------
 (7) i2_LCD_Command                                        2     2      0     240
                                              6 COMRAM     2     2      0
                          i2_MSdelay
 ---------------------------------------------------------------------------------
 (9) i2_MSdelay                                            6     4      2     196
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String_xy
     _LCD_Command
       _MSdelay
     _LCD_String
       _LCD_Char
         _MSdelay

 _leerADC (ROOT)
   _LCD_Num_xy
     ___awdiv
     ___awmod
     i2_LCD_Command
       i2_MSdelay
     i2_LCD_String
       i2_LCD_Char
         i2_MSdelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     37      3C       1       47.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3C      34        0.0%
DATA                 0      0      3C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Oct  8 20:45:17 2019

           ?_LCD_Command 0001                       l61 1634                       l55 13FA  
                     l64 1498                       l56 13FA                       l73 1344  
                     l67 144C                       l78 1604                       l89 157A  
           ___awdiv@sign 0006              ?_LCD_Num_xy 000B              __CFG_BORV$3 000000  
            ?_LCD_String 0031             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000  
            __CFG_WDT$ON 000000                      _GIE 007F97             __CFG_CPB$OFF 000000  
                    u300 157A                      u301 1576                      u330 130A  
                    u340 1334                      u350 1344                      u510 15D8  
                    u351 1340                      u511 15D4                      u337 1300  
                    u290 1560             __CFG_CPD$OFF 000000                      u291 155C  
                    u347 132A             ___awmod@sign 0006                      wreg 000FE8  
            LCD_Char@dat 0030                     l1100 1532                     l1110 154A  
                   l1102 153E                     l1112 1560                     l1114 1564  
                   l1108 1546                     l1140 141A                     l1132 1404  
                   l1310 160A                     l1150 143E                     l1142 141C  
                   l1134 1414                     l1320 162E                     l1312 1616  
                   l1144 1428                     l1136 1416                     l1314 161C  
                   l1146 143A                     l1138 1418                     l1330 15EA  
                   l1322 15C8                     l1180 1466                     l1172 1450  
                   l1316 1622                     l1308 1606                     l1148 143C  
                   l1332 15F2                     l1324 15C8                     l1190 148A  
                   l1182 1468                     l1174 1460                     l1318 1628  
                   l1334 15F8                     l1326 15D8                     l1184 1474  
                   l1176 1462                     l1192 12E4                     l1328 15E0  
                   l1186 1486                     l1178 1464                     l1194 12E8  
                   l1370 13A8                     l1188 1488                     l1196 130E  
                   l1380 13C0                     l1372 13AC                     l1198 1312  
                   l1390 13D4                     l1382 13C4                     l1374 13B0  
                   l1392 13D6                     l1384 13C8                     l1376 13B4  
                   l1394 13E8                     l1386 13CC                     l1378 13BC  
                   l1388 13D0                     _ADIE 007CEE                     _ADIF 007CF6  
                   STR_1 1001                     STR_2 100D                     _LATD 000F8C  
                   _LATE 000F8D                     i2l64 1530                     i2l73 13A6  
                   i2l67 14E4                     i2l89 15C4                     i2l98 1186  
                   _TMR0 000FD6              ?i2_LCD_Char 0001                     _main 13A8  
                   fsr0h 000FEA                     fsr1h 000FE2                     indf0 000FEF  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 003D  
                   start 000E          __end_of_MSdelay 157C            __CFG_IESO$OFF 000000  
          _LCD_String_xy 15C6            __CFG_MCLRE$ON 000000             ___param_bank 000000  
       __end_of_LCD_Char 144E         __end_of_LCD_Init 1636              LCD_Num_xy@i 0019  
                  ?_main 0001          __end_of___awdiv 10D8          __end_of___awmod 1238  
                  _T0CON 000FD5          ___awdiv@divisor 0003                    _LATD2 007C62  
                  _LATD3 007C63                    i2l103 1280                    i2l106 12B8  
                  i2l340 10D6                    i2l353 1236          ___awdiv@counter 0005  
                  _TRISD 000F95                    _TRISE 000F96            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000       __size_ofi2_MSdelay 004A           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_leerADC 12E4            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  tablat 000FF5                    plusw1 000FE3                    plusw2 000FDB  
    __size_of_LCD_Num_xy 00B0                    ttemp5 003E                    ttemp6 0041  
                  ttemp7 0045                    status 000FD8                    wtemp8 003E  
    __size_of_LCD_String 0062           ?_LCD_String_xy 0033          __initialization 1636  
           __end_of_main 1402                   ??_main 0038      __size_ofi2_LCD_Char 004C  
          __activetblptr 000002                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   _ADRESH 000FC4                   _ADRESL 000FC3  
       ___awdiv@dividend 0001         LCD_String_xy@msg 0034         LCD_String_xy@pos 0033  
       LCD_String_xy@row 0036                   i2l1200 1014                   i2l1210 1040  
                 i2l1202 1018                   i2l1130 15AE                   i2l1220 106E  
                 i2l1212 1048                   i2l1204 1026                   i2l1124 1590  
                 i2l1116 157C                   i2l1300 1346                   i2l1230 10A8  
                 i2l1222 1076                   i2l1214 104C                   i2l1206 102E  
                 i2l1126 1594                   i2l1118 1588                   i2l1302 134A  
              ??_MSdelay 002B                   i2l1240 10CE                   i2l1232 10AA  
                 i2l1224 1084                   i2l1216 1054                   i2l1208 1032  
                 i2l1128 15AA                   i2l1160 14B2                   i2l1152 149C  
                 i2l1304 1370                   i2l1400 1264                   i2l1234 10B0  
                 i2l1226 108A                   i2l1218 1066                   i2l1250 11A2  
                 i2l1170 14D6                   i2l1162 14B4                   i2l1154 14AC  
                 i2l1306 1374                   i2l1410 12A0                   i2l1402 1264  
                 i2l1228 10A0                   i2l1236 10B6                   i2l1260 11D6  
                 i2l1252 11A6                   i2l1244 1188                   i2l1164 14C0  
                 i2l1156 14AE                   i2l1340 10EC                   i2l1412 12B2  
                 i2l1404 1272                   i2l1238 10C6                   i2l1270 1210  
                 i2l1262 11DE                   i2l1254 11B4                   i2l1246 118C  
                 i2l1166 14D2                   i2l1158 14B0                   i2l1350 110E  
                 i2l1342 10EC                   i2l1414 12B4                   i2l1406 1274  
                 i2l1264 11EC                   i2l1272 1216                   i2l1256 11BC  
                 i2l1248 119A                   i2l1280 14E8                   i2l1168 14D4  
                 i2l1360 1124                   i2l1352 1116                   i2l1344 10EC  
                 i2l1336 10DA                   i2l1416 12B6                   i2l1408 128E  
                 i2l1274 1226                   i2l1266 1202                   i2l1258 11CE  
                 i2l1290 1500                   i2l1282 14F8                   i2l1362 114A  
                 i2l1354 111C                   i2l1346 10FC                   i2l1338 10DA  
                 i2l1276 122E                   i2l1268 120A                   i2l1292 150C  
                 i2l1284 14FA                   i2l1364 1166                   i2l1348 1104  
                 i2l1294 151E                   i2l1286 14FC                   i2l1366 116C  
                 i2l1296 1520                   i2l1288 14FE                   i2l1368 117A  
                 i2l1298 1522                   i2l1398 1262                   _INTCON 000FF2  
                 _OSCCON 000FD3                   _TMR0IF 007F92           __CFG_XINST$OFF 000000  
      __end_ofi2_MSdelay 15C6                ??___awdiv 0005           __CFG_STVREN$ON 000000  
              ??___awmod 0005         ___awdiv@quotient 0007          ___awmod@divisor 0003  
          ?i2_LCD_String 0009          ___awmod@counter 0005                ??_leerADC 001B  
   __size_of_LCD_Command 004C             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ?_LCD_Char 0001  
 __size_ofi2_LCD_Command 004C               __accesstop 0080  __end_of__initialization 1640  
              ?_LCD_Init 0001          __CFG_PBADEN$OFF 000000          ??_LCD_String_xy 0036  
          ___rparam_used 000001           __pcstackCOMRAM 0001             ??_LCD_Num_xy 000E  
         ??i2_LCD_String 000B             ??_LCD_String 0033         i2LCD_Command@cmd 0008  
           ??i2_LCD_Char 0007               ??_LCD_Char 002F               ??_LCD_Init 0031  
     __end_of_LCD_Num_xy 1188       __end_of_LCD_String 1346            LCD_Num_xy@msg 000C  
          LCD_Num_xy@pos 000B            LCD_Num_xy@row 0017            i2_LCD_Command 14E6  
        LCD_Num_xy@F2469 0038       __end_ofi2_LCD_Char 14E6                  i2u31_40 15AA  
                i2u31_41 15A6                  i2u40_40 10A0                  i2u32_40 15C4  
                i2u40_41 109C                  i2u32_41 15C0                  i2u41_40 10C6  
                i2u41_41 10C2                  i2u42_40 119A                  i2u50_40 13A6  
                i2u42_41 1196                  i2u50_41 13A2                  i2u43_40 11B4  
                i2u43_41 11B0                  i2u36_40 1026                  i2u44_40 11CE  
                i2u36_41 1022                  i2u44_41 11CA                  i2u52_41 10E4  
                i2u37_40 1040                  i2u45_40 11EC                  i2u53_40 10FC  
                i2u37_41 103C                  i2u45_41 11E8                  i2u53_41 10F8  
                i2u38_40 1066                  i2u46_40 1202                  i2u54_40 117A  
                i2u38_41 1062                  i2u46_41 11FE                  i2u54_41 1176  
                i2u39_40 1084                  i2u47_40 1226                  i2u55_40 1272  
                i2u39_41 1080                  i2u47_41 1222                  i2u55_41 126E  
                i2u48_40 136C                  i2u56_40 128E                  i2u56_41 128A  
                i2u48_47 1362                  i2u49_40 1396                  i2u49_47 138C  
                _MSdelay 1532            LCD_String@msg 0031                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 1014                  ___awmod 1188  
           __psmallconst 1000           ?i2_LCD_Command 0001                  __pcinit 1636  
                __ramtop 1000                  __ptext0 13A8                  __ptext1 15C6  
                __ptext2 12E4                  __ptext3 1402                  __ptext4 1606  
                __ptext5 144E                  __ptext6 1532                  __ptext8 10D8  
                __ptext9 1346                  _leerADC 0008         ___awmod@dividend 0001  
         __pintcode_body 1238     end_of_initialization 1640     __end_ofi2_LCD_String 13A8  
         LCD_Command@cmd 0030            __Lmediumconst 0000                  int_func 1238  
              i2_MSdelay 157C        LCD_Num_xy@mensaje 0012        __size_of_LCD_Char 004C  
      __size_of_LCD_Init 0030          ??i2_LCD_Command 0007            ??_LCD_Command 002F  
             ?i2_MSdelay 0001      start_initialization 1636         __CFG_OSC$INTIO67 000000  
  __end_of_LCD_String_xy 1606         __CFG_LPT1OSC$OFF 000000      __end_of_LCD_Command 149A  
            __pbssCOMRAM 0038    __size_ofi2_LCD_String 0062            i2LCD_Char@dat 0008  
               ?_MSdelay 0029             i2MSdelay@val 0001        __CFG_CCP2MX$PORTC 000000  
              __pintcode 0008                 ?___awdiv 0001                 ?___awmod 0001  
            ??i2_MSdelay 0003             i2_LCD_String 1346                 ?_leerADC 0001  
            __smallconst 1000    LCD_String_xy@location 0037                 MSdelay@i 002B  
               MSdelay@j 002D                 _LCD_Char 1402                 _LCD_Init 1606  
       __CFG_WDTPS$32768 000000              _LCD_Command 144E               _ADCON0bits 000FC2  
       __size_of_MSdelay 004A                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000          i2LCD_String@msg 0009         __size_of___awdiv 00C4  
       __size_of___awmod 00B0         __size_of_leerADC 12DC                 __ptext10 149A  
               __ptext11 14E6                 __ptext12 157C                 __ptext13 1188  
               __ptext14 1014            __size_of_main 005A               MSdelay@val 0029  
               int$flags 003D    __end_ofi2_LCD_Command 1532               _LCD_Num_xy 10D8  
             _LCD_String 12E4                 intlevel2 0000               i2MSdelay@i 0003  
             i2MSdelay@j 0005               i2_LCD_Char 149A   __size_of_LCD_String_xy 0040  
     LCD_Num_xy@location 0018             leerADC@valor 0027  
